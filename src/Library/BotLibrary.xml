<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotLibrary</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase representa el Bot.
            </summary>
        </member>
        <member name="T:ClassLibrary.Chat">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ChatRecord">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase representa una empresa
            </summary>
        </member>
        <member name="P:ClassLibrary.Company.Id">
            <summary>
            Id de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Name">
            <summary>
            Nombre de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Locations">
            <summary>
            Ubicacion/es de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.CompanyUsers">
            <summary>
            Lista de usuarios pertenecientes a la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Headings">
            <summary>
            Rubro al que pertenece la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.OfferRegister">
            <summary>
            Ofertas realizadas por la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.ProducedMaterials">
            <summary>
            Materiales producidos por la empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Company.#ctor(System.String,ClassLibrary.Location,System.String,System.String)">
            <summary>
            Constructor de objetos Company
            </summary>
            <param name="name"></param>
            <param name="ubi"></param>
            <param name="headings"></param>
            <param name="materials"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddUser(ClassLibrary.User)">
            <summary>
            A침ade un usuario a la lista de usuarios pertenecientes a la empresa
            </summary>
            <param name="userPar"></param>
        </member>
        <member name="T:ClassLibrary.CompanyRegister">
            <summary>
            Esta clase representa un registro de empresas
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.CompanyList">
            <summary>
            Lista de empresas registrados
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.AddCompany(ClassLibrary.Company)">
            <summary>
            Se a침ande  empresa a la lista de empresas
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.RemoveCompany(System.Int32)">
            <summary>
            Remueve una empresa de la lista de empresa registrados
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveUser(System.Int32,ClassLibrary.Company)">
            <summary>
            Remueve a un usuario de la lista de usuarios pertenecientes a la empresa
            </summary>
            <param name="id"></param>
            <param name="company"></param>
        </member>
        <member name="T:ClassLibrary.Creator">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.messageChannel">
            <summary>
            Canal por el cual se envian los mensajes
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.nextHandler">
            <summary>
            Contiene al siguiente Handler
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.Command">
            <summary>
            Palabra clave de Handler(comando)
            </summary>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Se setea el pr칩ximo handler (nextHandler)
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al pr칩ximo handler
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.CanHandle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el mensaje que recibe es igual al del comando
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.InviteTokenGeneratorHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.InviteTokenGeneratorHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.InviteTokenGeneratorHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.CompanyUserHandler">
            <summary>
             HAndler
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler para publicar una nueva oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler">
            <summary>
            Handler para pausar una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler">
            <summary>
            h
            </summary>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Reanuda una oferta determinada
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.ActiveOfferHandler">
            <summary>
            Handler para las ofertas activas
            </summary>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Ejecuci칩n del proceso de Handler
            </summary>
        </member>
        <member name="T:ClassLibrary.EndHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.#ctor(ClassLibrary.IMessageChannel,ClassLibrary.IHandler)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios empresa no registrados.
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ILocationApiAdapter">
            <summary>
            Interface para el adapter de las api de ubicacion
            </summary>
        </member>
        <member name="M:ClassLibrary.ILocationApiAdapter.GetLocation(System.String,System.String,System.String)">
            <summary>
            Transforma la Location de la Api a una Location del Bot
            </summary>
            <param name="address"></param>
            <param name="ciudad"></param>
            <param name="departamento"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ILocationApiAdapter.GetDistance(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Devuelve la distancia entre dos Locations de la Api
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ILocationApiAdapter.GetTravelTime(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Devuelve el tiempo que se tarda en llegar de una Location a otra
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Location">
            <summary>
            Esta clase representa una ubicacion
            </summary>
        </member>
        <member name="P:ClassLibrary.Location.Found">
            <summary>
            Devuelve si la ubicacion existe o no
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Location.Address">
            <summary>
            Devuelve la direccion completa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Location.Latitude">
            <summary>
            Devuelve la latitud de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Location.Longitude">
            <summary>
            Devuelve la longitud de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Location.#ctor(System.Boolean,System.String,System.Double,System.Double)">
            <summary>
            Constructor de objeto Location
            </summary>
            <param name="found"></param>
            <param name="address"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
        </member>
        <member name="T:ClassLibrary.LocationApiAdapter">
            <summary>
            Esta clase representa un adaptador de una Api de ubicaciones
            </summary>
        </member>
        <member name="M:ClassLibrary.LocationApiAdapter.GetLocation(System.String,System.String,System.String)">
            <summary>
            Transforma la Location de la Api a una Location del Bot
            </summary>
            <param name="address"></param>
            <param name="ciudad"></param>
            <param name="departamento"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LocationApiAdapter.GetDistance(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Devuelve la distancia entre dos Locations 
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LocationApiAdapter.GetTravelTime(ClassLibrary.Location,ClassLibrary.Location)">
            <summary>
            Devuelve el tiempo que se tarda en llegar de una Location a otra
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.ActualOfferList">
            <summary>
            Lista de ofertas actuales
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.AddOffer(ClassLibrary.Offer)">
            <summary>
            A침ade una nueva oferta a la lista de ofertas actuales
            </summary>
            <param name="NewOffer"></param>
        </member>
        <member name="M:ClassLibrary.Market.RemoveOffer(System.Int32)">
            <summary>
            Retira la oferta de la lista de ofertas actuales
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:ClassLibrary.Market.SearchOffer">
            <summary>
            Devuelve una lista de ofertas que cumplan con un parametro de busqueda
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase representa un material
            </summary>
        </member>
        <member name="P:ClassLibrary.Material.Name">
            <summary>
            Devuelve el tipo de objeto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Type">
            <summary>
            Devuelve el tipo de material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Classification">
            <summary>
            Devuelve la clasificacion del material
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,System.String)">
            <summary>
            Constructor de objetos Material
            </summary>
            <param name="type"></param>
            <param name="classification"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ModifyOffer">
            <summary>
            Esta clase es la encargada de modificar una oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Quantity(ClassLibrary.Offer,System.Int32)">
            <summary>
            Modifica la cantidad de materiales en una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newQuantity"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Keywords(ClassLibrary.Offer,System.String)">
            <summary>
            Modifica las palabras claves de una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newKeyword"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Availability(ClassLibrary.Offer,System.Boolean)">
            <summary>
            Modifica la disponibilidad de una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newAvailability"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Term(ClassLibrary.Offer,System.Int32)">
            <summary>
            Modifica el plazo de una oferta
            </summary>
            <param name="NewOffer"></param>
            <param name="NewExtendTerm"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Location(ClassLibrary.Offer,System.String,System.String,System.String)">
            <summary>
            Modifica la Location de una oferta
            </summary>
            <param name="NewOffer"></param>
            <param name="newAdress"></param>
            <param name="newCity"></param>
            <param name="newDepartment"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Id">
            <summary>
            Id de la Oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Material que se vende en la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Habilitation">
            <summary>
            Habilitaciones necesarias para poder manejar el producto en venta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion en donde se encuentran el producto a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.QuantityMaterial">
            <summary>
            Cantidad de material a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Empresa que vende el producto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Keywords">
            <summary>
            Palabras claves asignadas
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Disponibilidad de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de publicacion de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Term">
            <summary>
            Plazo de la oferta
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.Int32,ClassLibrary.Material,System.String,ClassLibrary.Location,System.Int32,ClassLibrary.Company,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Constructor de Offer
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="company"></param>
            <param name="keywords"></param>
            <param name="availability"></param>
            <param name="publicationDate"></param>
            <param name="term"></param>
        </member>
        <member name="T:ClassLibrary.CompanyRegister">
            <summary>
            Esta clase representa un registro de empresas
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.CompanyList">
            <summary>
            Lista de empresas registrados
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.TokenRegister">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="F:ClassLibrary.TokenRegister.tokenList">
            <summary>
            Diccionario con nombre de empresas y sus respectivos tokens habilitados
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.UserRegister">
            <summary>
            Esta clase representa un registro de usuarios
            </summary>
        </member>
        <member name="P:ClassLibrary.UserRegister.DataUsers">
            <summary>
            Lista de usuarios registrados
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.CompanyRegisterServiceProvider">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="M:ClassLibrary.CompanyRegisterServiceProvider.AddCompany(ClassLibrary.Company)">
            <summary>
            Se a침ande  empresa a la lista de empresas
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegisterServiceProvider.RemoveCompany(System.Int32)">
            <summary>
            Remueve una empresa de la lista de empresa registrados
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegisterServiceProvider.SearchCompany(System.String)">
            <summary>
            Busca una oferta por el nombre y devuelve el objeto Company correspondiente a la empresa    
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyServiceProvider">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="M:ClassLibrary.CompanyServiceProvider.AddUserToCompany(ClassLibrary.User,ClassLibrary.Company)">
            <summary>
            A침ade un usuario a la lista de usuarios de la empresa de un objeto Company
            </summary>
            <param name="user"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyServiceProvider.RemoveUserFromCompany(System.Int32,ClassLibrary.Company)">
            <summary>
            Remueve un usuario de la lista de usuarios de la empresa registrados
            </summary>
            <param name="Id"></param>
        </member>
        <member name="T:ClassLibrary.CreateUserServiceProvider">
            <summary>
            Esta clase se encarga de crear usuarios de empresas y usuarios emprendedores
            </summary>
        </member>
        <member name="M:ClassLibrary.CreateUserServiceProvider.CreateCompanyUser(ClassLibrary.IMessage,ClassLibrary.Company)">
            <summary>
            Crea un usuario empresa
            </summary>
            <param name="input"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CreateUserServiceProvider.CreateEntrepreneurUser(ClassLibrary.IMessage,System.String,ClassLibrary.Location,System.String,System.String)">
            <summary>
            Crea un usuario emprendedor
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitations"></param>
        </member>
        <member name="T:ClassLibrary.TokenRegisterServiceProvider">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="M:ClassLibrary.TokenRegisterServiceProvider.GenerateToken(System.String)">
            <summary>
            Genera un nuevo token de invitacion
            </summary>
            <param name="nameCompany"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegisterServiceProvider.IsValidToken(System.String,ClassLibrary.Company@)">
            <summary>
            Verifica si el token es valido
            </summary>
            <param name="codigo"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.UserRegisterServiceProvider">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="M:ClassLibrary.UserRegisterServiceProvider.AddUser(System.Int32,ClassLibrary.IRole)">
            <summary>
            A침ade un usuario a la lista de usuarios registrados
            </summary>
            <param name="Id"></param>
            <param name="role"></param>
        </member>
        <member name="M:ClassLibrary.UserRegisterServiceProvider.RemoveUser(System.Int32)">
            <summary>
            Remueve un usuario de la lista de usuarios registrados
            </summary>
            <param name="Id"></param>
        </member>
        <member name="M:ClassLibrary.UserRegisterServiceProvider.SearchCompany(System.String)">
            <summary>
            Busca una oferta por el nombre y devuelve el objeto Company correspondiente a la empresa    
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.SetUp">
            <summary>
            Esta clase se encarga de iniciar el registro y la chain of responsability correspondiente
            </summary>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Name">
            <summary>
            Nombre del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Heading">
            <summary>
            Rubro del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Habilitation">
            <summary>
            Habilitaciones del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Location">
            <summary>
            Ubicacion del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.BoughtList">
            <summary>
            Lista de compras pasadas del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.#ctor(System.String,ClassLibrary.Location,System.String,System.String)">
            <summary>
            Constructor de objetos Entrepreneur
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="heading"></param>
            <param name="habilitation"></param>
        </member>
        <member name="T:ClassLibrary.User">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="F:ClassLibrary.User.Role">
            <summary>
            Rol del usuario
            </summary>
        </member>
        <member name="P:ClassLibrary.User.Id">
            <summary>
            Id del usuario
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.User.#ctor(System.Int32,ClassLibrary.IRole)">
            <summary>
            Constructor de User
            </summary>
            <param name="idPar"></param>
            <param name="role"></param>
        </member>
        <member name="T:ClassLibrary.AdminRole">
            <summary>
            Esta clase representa el rol de Admin
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.InviteCompany">
            <summary>
            Envia un token para que una compania se pueda unir al bot
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.TipoRol">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyRole">
            <summary>
            Esta clase representa el Rol de CompanyUser
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRole.Company">
            <summary>
            Devuelve la company a la que pertenece el user
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRole.#ctor(ClassLibrary.Company)">
            <summary>
            Constructor de CompanyRole
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRole.TipoRol">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.EntrepreneurRole">
            <summary>
            Esta clase representa el Rol de EntrepreneurUser
            </summary>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.#ctor(System.String,ClassLibrary.Location,System.String,System.String)">
            <summary>
            Es el constructor de EntrepreneurRole
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.TipoRol">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IRole">
            <summary>
            Interface para los roles
            </summary>
        </member>
        <member name="M:ClassLibrary.IRole.TipoRol">
            <summary>
            Se devuelve TipoRol
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
