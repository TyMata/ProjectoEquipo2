<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotLibrary</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase representa el Bot.
            </summary>
        </member>
        <member name="T:ClassLibrary.Chat">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ChatRecord">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase representa una empresa
            </summary>
        </member>
        <member name="P:ClassLibrary.Company.Id">
            <summary>
            Id de la empresa
            </summary>
            <value></value> 
        </member>
        <member name="P:ClassLibrary.Company.Name">
            <summary>
            Nombre de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Locations">
            <summary>
            Ubicacion/es de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.CompanyUsers">
            <summary>
            Lista de usuarios pertenecientes a la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Headings">
            <summary>
            Rubro al que pertenece la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.OfferRegister">
            <summary>
            Ofertas realizadas por la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.ProducedMaterials">
            <summary>
            Materiales producidos por la empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Company.#ctor(System.String,Ucu.Poo.Locations.Client.Location,System.String,System.String)">
            <summary>
            Constructor de objetos Company
            </summary>
            <param name="name"></param>
            <param name="ubi"></param>
            <param name="headings"></param>
            <param name="materials"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddUser(System.Int32)">
            <summary>
            A침ade un usuario a la lista de usuarios pertenecientes a la empresa, CREATOR, crea user ya que tiene  una lista de users
            /// </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveUser(System.Int32)">
            <summary>
            Remueve  un usuario de la lista de usuarios pertenecientes a la empresa
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.messageChannel">
            <summary>
            Canal por el cual se envian los mensajes
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.nextHandler">
            <summary>
            Contiene al siguiente Handler
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.Command">
            <summary>
            Palabra clave de Handler(comando)
            </summary>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Se setea el pr칩ximo handler (nextHandler)
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al pr칩ximo handler
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.CanHandle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el mensaje que recibe es igual al del comando
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler">
            <summary>
            Handler encargado de delegar la accion de a침adir una empresa nueva al registro
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de los objetos AddCompanyHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pide algunos datos de la empresa que se quiere registrar la crea
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler">
            <summary>
            Primer Handler de la CoR para los usuarios Admin.
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de los objetos AdminStartHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Le otorga por pantalla los comandos que puede utilizar el admin.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler">
            <summary>
            Handler encargado de delegar la accion de eliminar una empresa del registro.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveCompanyHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pregunta por el nombre de la empresa la cual se quiere eliminar y luego de 
            verificar que ya esta registrada, la elimina.
            De no estar registrada le avisa al usuario de esto.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler">
            <summary>
            Handler encargado de delegar la accion de eliminar un usario del registro
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveUserHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pregunta por el id del usuario que se quiere eliminar y si el usuario que se quiere eliminar esta registrado
            delega la accion de eliminarlo y lo informa por pantalla.
            De no ser asi lo informa por pantalla al usuario.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.CompanyUserHandler">
            <summary>
             
            </summary>
        </member>
        <member name="M:ClassLibrary.CompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos CompanyUserHander
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyHabilitationsHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ModifyOfferHandler">
            <summary>
            Handler encargado de delegar la accion de Modificar una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyOfferHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Metodo
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar el precio de una determinada oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyPriceHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyPriceHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyQuantityHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyQuantityHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler encargado de delegar la accion de crear y publicar una oferta en el registro
            </summary>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos PublishOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pregunta por los datos de la oferta a crear y delega la accion de crearla y publicarla
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveOfferHandler">
            <summary>
            Handler encargado de delegar la accion de retirar una oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Se encarga de pasar por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de eliminarla.
            De no existir la oferta le avisa por pantalla al usuario.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler">
            <summary>
            Handler encargado de delegar la accion de volver a activar una oferta suspendida
            </summary>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ResumeOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Se encarga de pasarle por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de volver a activarla.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler">
            <summary>
            Handler encargado de delegar la accion de suspender una oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SuspendOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Se encarga de pasarle por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de suspenderla.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ActiveOfferHandler">
            <summary>
            HAndler encargado de 
            </summary>
        </member>
        <member name="M:ClassLibrary.ActiveOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ActiveOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferByIdHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por su Id
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferByIdHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SearchOfferByIdHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferByLocationHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por su ubicaci칩n
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferByLocationHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SearchOfferByLocationHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferByMaterialsHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por material
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferByMaterialsHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SearchOfferByMaterialsHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferByKeyWordsHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por keywords
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferByKeyWordsHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SearchOfferByKeyWordsHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.ShowBoughtOffersHandler">
            <summary>
            Handler encargado de delegar la accion de mostrar las ofertas compradas por un emprendedor
            </summary>
        </member>
        <member name="M:ClassLibrary.ShowBoughtOffersHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ShowBoughtOffersHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Ejecuci칩n del proceso de Handler
            </summary>
        </member>
        <member name="T:ClassLibrary.EndHandler">
            <summary>
            Handler encargado de darle final a la CoR
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.#ctor(ClassLibrary.IMessageChannel,ClassLibrary.IHandler)">
            <summary>
            Constructor de objetos EndHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Le avisa al usuario que el comando no se reconocio y 
            va denuevo al primer handler de la cadena
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Handler encargado de delegar la accion de registrar un usuario empresa
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredCompanyUserHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pregunta por el codigo de invitacion y delega la tarea de verificar si el token es valido 
            y la creacion de el usuario empresa.
            De no ser asi se le avisa al usuario.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler">
            <summary>
            Handler encargado de crear un usuario emprendedor
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredEntrepreneurUserHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Pregunta por los datos del emprendedor y delega la tarea de crear un usuario emprendedor
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredUserHandler">
            <summary>
            HAndler encargado de darle la bienvenida a un usuario no registrado.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Se encarga de darle la bienvenida al usuario no registrado y preguntarle
            si es un emprendedor o ubn usuario empresa
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase representa un material
            </summary>
        </member>
        <member name="P:ClassLibrary.Material.Name">
            <summary>
            Devuelve el tipo de objeto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Type">
            <summary>
            Devuelve el tipo de material
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Classification">
            <summary>
            Devuelve la clasificacion del material
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de objetos Material
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="classification"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Id">
            <summary>
            Id de la Oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Material que se vende en la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Habilitation">
            <summary>
            Habilitaciones necesarias para poder manejar el producto en venta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion en donde se encuentran el producto a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.QuantityMaterial">
            <summary>
            Cantidad de material a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.TotalPrice">
            <summary>
            Precio total del producto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Empresa que vende el producto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Keywords">
            <summary>
            Palabras claves asignadas
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Disponibilidad de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de publicacion
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.Int32,System.String,System.String,Ucu.Poo.Locations.Client.Location,System.Int32,System.Double,ClassLibrary.Company,System.Boolean,System.DateTime)">
            <summary>
            Constructor de Offer
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="availability"></param>
            <param name="publicationDate"></param>
        </member>
        <member name="T:ClassLibrary.CompanyRegister">
            <summary>
            Esta clase representa un registro de empresas
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.CompanyList">
            <summary>
            Lista de empresas registrados
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Add(ClassLibrary.Company)">
            <summary>
            Por la ley de demeter
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Remove(ClassLibrary.Company)">
            <summary>
            M칠todo para remover empresas de la lista de empresas
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.GetCompanyByUserId(System.Int32)">
            <summary>
            Devuelva una empresa segun el id del user
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase representa el mercado con sus ofertas
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.ActualOfferList">
            <summary>
            Lista de ofertas actuales
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Market.SuspendedOfferList">
            <summary>
            Lista de ofertas suspendidas
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.PublishOffer(ClassLibrary.Offer)">
            <summary>
            A침ade una nueva oferta a la lista de ofertas actuales
            </summary>
            <param name="newOffer"></param>
        </member>
        <member name="M:ClassLibrary.Market.RemoveOffer(System.Int32)">
            <summary>
            Retira la oferta de la lista de ofertas actuales
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.SearchOffers(System.String)">
            <summary>
            Devuelve una lista de ofertas que cumplan con un parametro de busqueda , ARREGLAR KEYWORDS ANTES
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.SuspendOffer(System.Int32)">
            <summary>
            Suspende una oferta actual
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.ResumeOffer(System.Int32)">
            <summary>
            A una oferta suspendida la vuelve a activar
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ClassLibrary.TokenRegister">
            <summary>
            Esta clase  representa un registro de tokens
            </summary>
        </member>
        <member name="F:ClassLibrary.TokenRegister.TokenList">
            <summary>
            Diccionario con nombre de empresas y sus respectivos tokens habilitados
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.IsValidToken(System.String)">
            <summary>
            Verifica si el token es valido
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Add(System.String,ClassLibrary.Company)">
            <summary>
            Metodo par a침adir un token al diccionario de tokens
            </summary>
            <param name="token"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Remove(System.String)">
            <summary>
            Metodo para remover un token del diccionario de tokens
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Contains(System.String)">
            <summary>
            Por la ley de demeter se crea Contains
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.GenerateToken(ClassLibrary.Company)">
            <summary>
            Se genera un  token para una nueva empresa y se lo a침ade al diccionario
            </summary>
            <param name="company"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.UserRegister">
            <summary>
            Esta clase representa un registro de usuarios
            </summary>
        </member>
        <member name="P:ClassLibrary.UserRegister.DataUsers">
            <summary>
            Lista de usuarios registrados
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.UserRegister.Add(ClassLibrary.User)">
            <summary>
            ESto se hace por la ley de demeter
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.Remove(ClassLibrary.User)">
            <summary>
            Remueve un user de la lista. Por la ley de demeter
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.GetUserById(System.Int32)">
            <summary>
            Devuelve  un objeto user segun la id dada
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyServiceProvider">
            <summary>
            Esta clase se encarga de crear y modificar objetos Company
            </summary>
        </member>
        <member name="M:ClassLibrary.CompanyServiceProvider.CreateCompany(System.String,Ucu.Poo.Locations.Client.Location,System.String,System.String)">
            <summary>
            Crea un objeto Company
            </summary>
            <param name="nombre"></param>
            <param name="ubi"></param>
            <param name="headings"></param>
            <param name="materials"></param>
        </member>
        <member name="T:ClassLibrary.CreateUserServiceProvider">
            <summary>
            Esta clase se encarga de crear usuarios de empresas y usuarios emprendedores
            </summary>
        </member>
        <member name="M:ClassLibrary.CreateUserServiceProvider.CreateCompanyUser(ClassLibrary.IMessage,ClassLibrary.Company)">
            <summary>
            Crea un usuario empresa
            </summary>
            <param name="input"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CreateUserServiceProvider.CreateEntrepreneurUser(ClassLibrary.IMessage,System.String,Ucu.Poo.Locations.Client.Location,System.String,System.String)">
            <summary>
            Crea un usuario emprendedor
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitations"></param>
        </member>
        <member name="T:ClassLibrary.OfferServiceProvider">
            <summary>
            Esta clase se encarga de crear y modificar objetos Offer
            </summary>
        </member>
        <member name="M:ClassLibrary.OfferServiceProvider.CreateOffer(System.Int32,System.String,System.String,Ucu.Poo.Locations.Client.Location,System.Int32,System.Double,ClassLibrary.Company,System.String,System.Boolean)">
            <summary>
            Crea y devuelve una nueva oferta
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="keywords"></param>
            <param name="availability"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.TokenRegisterServiceProvider">
            <summary>
            Esta clase se encarga de generar validar y a침adir empresas a TokenRegister
            </summary>
        </member>
        <member name="T:ClassLibrary.UserRegisterServiceProvider">
            <summary>
            Esta clase se encarga de la modificacion y busquedas en UserRegister
            </summary>
        </member>
        <member name="T:ClassLibrary.Setup">
            <summary>
            Esta clase solo se encarga de crear la chain of responsability correspondiente para cada usuario
            por lo tanto cumple con el patron SRP. Tambien comple con el patron Creator porque utiliza, necesariamente, ya que es la encargada
            de construir los Handler para crear la CoR.
            </summary>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
            Esta clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Name">
            <summary>
            Nombre del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Heading">
            <summary>
            Rubro del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Habilitation">
            <summary>
            Habilitaciones del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Location">
            <summary>
            Ubicacion del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.BoughtList">
            <summary>
            Lista de compras pasadas del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.#ctor(System.String,Ucu.Poo.Locations.Client.Location,System.String,System.String)">
            <summary>
            Constructor de objetos Entrepreneur
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="heading"></param>
            <param name="habilitation"></param>
        </member>
        <member name="T:ClassLibrary.User">
            <summary>
            Esta clase representa un usuario.
            Decidimos crearla de esta manera porque solo tiene la responsabilidad de conocer los datos
            de un usuario asi cumple con el SRP, tambien decidimos que el Role sea un IRole por el LSP,
            asi al momento de crear un usuario se le puede otorgar cualquiera de los 3 roles (AdminRole,
            CompanyRole o EntrepreneurRole) ya que son subtipos de IRole.
            </summary>
        </member>
        <member name="F:ClassLibrary.User.Role">
            <summary>
            Rol del usuario
            </summary>
        </member>
        <member name="P:ClassLibrary.User.Id">
            <summary>
            Id del usuario
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.User.#ctor(System.Int32,ClassLibrary.IRole)">
            <summary>
            Constructor de User
            </summary>
            <param name="id"></param>
            <param name="role"></param>
        </member>
        <member name="M:ClassLibrary.User.IsCompanyUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AdminRole">
            <summary>
            Esta clase representa el rol de Admin
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.InviteCompany">
            <summary>
            Envia un token para que una compania se pueda unir al bot
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AdminRole.Data">
            <summary>
            Devuelve la data de un admin
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyRole">
            <summary>
            Esta clase representa el Rol de CompanyUser
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRole.Company">
            <summary>
            Devuelve la company a la que pertenece el user
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRole.#ctor(ClassLibrary.Company)">
            <summary>
            Constructor de CompanyRole
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CompanyRole.Data">
            <summary>
            Devuelve la data de un usuario empresa
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.EntrepreneurRole">
            <summary>
            Esta clase representa el Rol de EntrepreneurUser
            </summary>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.#ctor(System.String,Ucu.Poo.Locations.Client.Location,System.String,System.String)">
            <summary>
            Es el constructor de EntrepreneurRole
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.Data">
            <summary>
            Devuelve la data de un usuario emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IRole">
            <summary>
            Interface para los roles
            </summary>
        </member>
        <member name="M:ClassLibrary.IRole.RoleType">
            <summary>
            Se devuelve TipoRol
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IRole.Data">
            <summary>
            Nos devuelve la data del usuario en string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Singleton`1">
            <summary>
            Se crea la clase singleton para usar
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Singleton`1.Instance">
            <summary>
            metodo
            </summary>
            <value></value>
        </member>
    </members>
</doc>
