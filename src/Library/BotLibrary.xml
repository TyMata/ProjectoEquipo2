<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotLibrary</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase representa el Bot.
            </summary>
        </member>
        <member name="T:ClassLibrary.Chat">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase representa una empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Company.Id">
            <summary>
            Id de la empresa
            </summary>
            <value></value> 
        </member>
        <member name="P:ClassLibrary.Company.Name">
            <summary>
            Nombre de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Locations">
            <summary>
            Ubicacion/es de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.CompanyUsers">
            <summary>
            Lista de usuarios pertenecientes a la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.InvitationToken">
            <summary>
            Token para que un ususario empresa pueda registrarse.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Headings">
            <summary>
            Rubro al que pertenece la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.OfferRegister">
            <summary>
            Ofertas realizadas por la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.ProducedMaterials">
            <summary>
            Materiales producidos por la empresa.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Company.#ctor">
            <summary>
            JsonConstructor de objetos Company.
            </summary>
        </member>
        <member name="M:ClassLibrary.Company.#ctor(System.String,ClassLibrary.LocationAdapter,System.String)">
            <summary>
            Constructor de objetos Company.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddUser(System.Int32)">
            <summary>
            Añade un usuario a la lista de usuarios pertenecientes a la empresa, CREATOR, crea user ya que tiene  una lista de users.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveUser(System.Int32)">
            <summary>
            Remueve  un usuario de la lista de usuarios pertenecientes a la empresa.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddOffer(ClassLibrary.Offer)">
            <summary>
            Añade una oferta al registro de la empresa
            /// </summary>
            <param name="offer"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveOffer(System.Int32)">
            <summary>
            Remueve una oferta del registro de ofertas de la empresa
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.GenerateToken">
            <summary>
            Se genera un  token para una nueva empresa y se lo añade al diccionario
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Company.ConvertToJson">
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:ClassLibrary.Company.LoadFromJson(System.String)">
            <summary>
            Carga los datos del archivo en formato .json y reconstruye los objetos a partir de este
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.Company.GetMaterial(System.String)">
            <summary>
            Retorna un material segun el nombre de estes
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Company.GetLocation(System.String)">
            <summary>
            Devuelva una ubicacion dentro de la lista de ubicaciones de la empresa a partir de la dirección.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers.
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.messageChannel">
            <summary>
            Canal por el cual se envian los mensajes.
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.nextHandler">
            <summary>
            Contiene al siguiente Handler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.Command">
            <summary>
            Palabra clave de Handler(comando).
            </summary>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Se setea el próximo handler (nextHandler).
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al próximo handler.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.CanHandle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el mensaje que recibe es igual al del comando.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o lo manda al siguiente handler si no lo puede procesar.
            </summary>
            <param name="message">El mensaje a procesar</param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler">
            <summary>
            Primer Handler de la CoR para los usuarios Admin.
            </summary>
        </member>
        <member name="P:ClassLibrary.AdminStartHandler.State">
            <summary>
            Estado para el handler de AdminStart.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de los objetos AdminStartHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Le otorga por pantalla los comandos que puede utilizar el admin.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler.AdminStartState">
            <summary>
            Indica los diferentes estados que puede tener el comando AdminStartHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AdminStartHandler.AdminStartState.Start">
            <summary>
            El estado inicial del comando. Aquí pide un comando a ejecutar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="P:ClassLibrary.AdminStartHandler.State">
            <summary>
            Estado para el handler de AdminStart.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler encargado de delegar la accion de eliminar una empresa del registro.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.State">
            <summary>
            Estado para el handler de RemoveCompany.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler.AdminStartState">
            <summary>
            Indica los diferentes estados que puede tener el comando AdminStartHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AdminStartHandler.AdminStartState.Start">
            <summary>
            El estado inicial del comando. Aquí pide un comando a ejecutar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando RemoveCompany.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveCompanyHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el nombre de la empresa la cual se quiere eliminar y luego de 
            verificar que ya esta registrada, la elimina.
            De no estar registrada le avisa al usuario de esto.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState">
            <summary>
            Indica los diferentes estados que tiene AddCompanyHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el Id de la empresa a eliminar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState.Company">
            <summary>
            Luego de pedir el Id de la empresa. En este estado el comando elimina la empresa si existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData">
            <summary>
            Representa los datos que va obteniendo el comando RemoveCompanyHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData.CompanyId">
            <summary>
            El Id de la empresa que se ingresó en el estado RemoveCompanyState.Company.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData.Result">
            <summary>
            El resultado de la búsqueda de la empresa por medio del Id.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler">
            <summary>
            Handler encargado de delegar la accion de eliminar un usario del registro
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.State">
            <summary>
            Estado para el handler de RemoveUser.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando RemoveUserHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el id del usuario que se quiere eliminar y si el usuario que se quiere eliminar esta registrado
            delega la accion de eliminarlo y lo informa por pantalla.
            De no ser asi lo informa por pantalla al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler.RemoveUserState">
            <summary>
            Indica los diferentes estados que tiene RemoveUserHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveUserHandler.RemoveUserState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el Id del usuario a eliminar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveUserHandler.RemoveUserState.User">
            <summary>
            Luego de pedir el Id del usuario. En este estado el comando elimina el usuario si existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler.RemoveUserData">
            <summary>
            Representa los datos que va obteniendo el comando RemoveUserHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.RemoveUserData.UserId">
            <summary>
            El Id del usuario que se ingresó en el estado RemoveUserState.User.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.RemoveUserData.Result">
            <summary>
            El resultado de la búsqueda del usuario por medio del Id.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.CompanyUserHandler">
            <summary>
            Handler encargado de dar a conocer los comandos disponibles para un usuario empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.CompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos CompanyUserHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.CompanyUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Le da la bienvenida al usuario empresa y le pasa por pantalla los comandos disponibles.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            /// </summary>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyHabilitationsHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.ModifyOfferData.Offer">
            <summary>
            La dirección que se ingresó en el estado AddressState.AddressPrompt.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar el precio de una determinada oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyPriceHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyPriceHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ModifyPriceHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
             Handle
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.ModifyOfferData.Offer">
            <summary>
            La dirección que se ingresó en el estado AddressState.AddressPrompt.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyQuantityHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ModifyQuantityHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ModifyQuantityHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de mostrar la lista de ofertas de la empresa y modificar la cantidad de la oferta determinada.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.ModifyOfferData.Offer">
            <summary>
            La dirección que se ingresó en el estado AddressState.AddressPrompt.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler encargado de delegar la accion de crear y publicar una oferta en el registro
            </summary>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos PublishOfferHandler
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por los datos de la oferta a crear y delega la accion de crearla y publicarla
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveOfferHandlerCopy">
            <summary>
            Handler encargado de delegar la accion de retirar una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandlerCopy.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos RemoveOfferHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandlerCopy.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasar por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de eliminarla.
            De no existir la oferta le avisa por pantalla al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler">
            <summary>
            Handler encargado de delegar la accion de volver a activar una oferta suspendida.
            </summary>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ResumeOfferHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasarle por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de volver a activarla.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandlerCopy">
            <summary>
            Handler encargado de delegar la accion de suspender una oferta.
            </summary>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandlerCopy.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SuspendOfferHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandlerCopy.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasarle por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de suspenderla.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.EndHandler">
            <summary>
            Handler encargado de darle final a la CoR.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.#ctor(ClassLibrary.IMessageChannel,ClassLibrary.IHandler)">
            <summary>
            Constructor de objetos EndHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Le avisa al usuario que el comando no se reconocio y 
            va denuevo al primer handler de la cadena.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.ActiveOfferHandler">
            <summary>
            HAndler encargado de 
            </summary>
        </member>
        <member name="M:ClassLibrary.ActiveOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos ActiveOfferHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por keywords
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos SearchOfferByKeyWordsHandler.
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Verifica si se realiza el proceso o se lo manda al next handler.
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Ejecución del proceso de Handler.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Handler encargado de delegar la accion de registrar un usuario empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredCompanyUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el codigo de invitacion y delega la tarea de verificar si el token es valido 
            y la creacion de el usuario empresa.
            De no ser asi se le avisa al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="P:ClassLibrary.UnregisteredCompanyUserHandler.UnregisteredCompanyUserData.Token">
            <summary>
            El Token que se ingresó en el estado UnregisteredCompanyUserState.Token.
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler">
            <summary>
            Handler encargado de crear un usuario emprendedor.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredEntrepreneurUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por los datos del emprendedor y delega la tarea de crear un usuario emprendedor.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserState">
            <summary>
            Estados para el handler de un emprendedor no registrado
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData">
            <summary>
            Se guardan los datos que el usuario pasa por el chat.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.Name">
            <summary>
            El nombre que se ingresó en el estado UnregisteredCompanyUserState.Name.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.Address">
            <summary>
            se guarda la dirección que se ingresó en el estado UnregisteredEntrepreneurUserState.Addres .
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.City">
            <summary>
            Se guarda la ciudad que se ingresó en el estado UnregisteredEntrepreneurUserState.City .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.Department">
            <summary>
            Se guarda eL departamento que se ingresó en el estado UnregisteredEntrepreneurUserState.Department .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.LocationResult">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.Habilitations">
            <summary>
            El link a las habilitaciones que se ingresó en el estado UnregisteredCompanyUserState.Habilitations.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepeneurUserHandler.UnregisteredEntrepeneurUserData.Headings">
            <summary>
            El rubro que se ingresó en el estado UnregisteredCompanyUserState.Headings.
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredUserHandler">
            <summary>
            HAndler encargado de darle la bienvenida a un usuario no registrado.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Constructor de objetos UnregistredUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de darle la bienvenida al usuario no registrado y preguntarle
            si es un emprendedor o ubn usuario empresa
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.IDistanceResult">
            <summary>
            Una interfaz que define una abstracción para el resultado de calcular distancias.
            </summary>
        </member>
        <member name="P:ClassLibrary.IDistanceResult.FromExists">
            <summary>
            Obtiene un valor que indica si la dirección de origen para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:ClassLibrary.IDistanceResult.ToExists">
            <summary>
            Obtiene un valor que indica si la dirección de destino para el cálculo de distancias existe; sólo se puede
            calcular la distancia entre direcciones que existen.
            </summary>
        </member>
        <member name="P:ClassLibrary.IDistanceResult.Distance">
            <summary>
            La distancia calculada.
            </summary>
        </member>
        <member name="P:ClassLibrary.IDistanceResult.Time">
            <summary>
            El tiempo en llegar del origen al destino.
            </summary>
        </member>
        <member name="T:ClassLibrary.DistanceResult">
            <summary>
            Una implementación concreta del resutlado de calcular distancias. Además de las propiedades definidas en
            IDistanceResult esta clase agrega propiedades para acceder a las coordenadas de las direcciones buscadas.
            </summary>
        </member>
        <member name="M:ClassLibrary.DistanceResult.#ctor(Ucu.Poo.Locations.Client.Location,Ucu.Poo.Locations.Client.Location,System.Double,System.Double)">
            <summary>
            Inicializa una nueva instancia de DistanceResult a partir de dos coordenadas, la distancia y el tiempo
            entre ellas.
            </summary>
            <param name="from">Las coordenadas de origen.</param>
            <param name="to">Las coordenadas de destino.</param>
            <param name="distance">La distancia entre las coordenadas.</param>
            <param name="time">El tiempo que se demora en llegar del origen al destino.</param>
        </member>
        <member name="T:ClassLibrary.ILocationApiAdapter">
            <summary>
            Interface para el adapter de las api de ubicacion
            </summary>
        </member>
        <member name="M:ClassLibrary.ILocationApiAdapter.GetLocation(System.String,System.String,System.String)">
            <summary>
            Transforma la Location de la Api a una Location del Bot
            </summary>
            <param name="address"></param>
            <param name="ciudad"></param>
            <param name="departamento"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ILocationApiAdapter.GetDistance(System.String,System.String)">
            <summary>
            Devuelve la distancia entre dos Locations de la Api
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.LocationAdapter">
            <summary>
            Esta clase representa una ubicacion
            </summary>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Found">
            <summary>
            Devuelve si la ubicacion existe o no
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Address">
            <summary>
            Devuelve la direccion completa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Latitude">
            <summary>
            Devuelve la latitud de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Longitude">
            <summary>
            Devuelve la longitud de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.LocationAdapter.#ctor(Ucu.Poo.Locations.Client.Location)">
            <summary>
            Adaptador del objeto location de la api
            </summary>
            <param name="location"></param>
        </member>
        <member name="T:ClassLibrary.LocationApiAdapter">
            <summary>
            Esta clase representa un adaptador de una Api de ubicaciones
            </summary>
        </member>
        <member name="M:ClassLibrary.LocationApiAdapter.GetLocation(System.String,System.String,System.String)">
            <summary>
            Transforma la Location de la Api a una Location del Bot
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="department"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LocationApiAdapter.GetDistance(System.String,System.String)">
            <summary>
            Devuelve las distancia entre dos direcciones
            </summary>
            <param name="fromAddress"></param>
            <param name="toAddress"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase representa un material.
            </summary>
        </member>
        <member name="P:ClassLibrary.Material.Name">
            <summary>
            Devuelve el tipo de objeto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Type">
            <summary>
            Devuelve el tipo de material.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Classification">
            <summary>
            Devuelve la clasificacion del material.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Material.#ctor">
            <summary>
            JsonConstructor para objetos Material.
            </summary>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de objetos Material.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="classification"></param>
        </member>
        <member name="M:ClassLibrary.Material.ConvertToJson">
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage.
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.TelegramBotMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.TelegramBotMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.TelegramBotMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.TelegramBotMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramBotMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TelegramBotMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase representa una oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Id">
            <summary>
            Id de la oferta.
            </summary>
            <value></value> 
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Material que se vende en la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Habilitation">
            <summary>
            Habilitaciones necesarias para poder manejar el producto en venta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion en donde se encuentran el producto a vender.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.QuantityMaterial">
            <summary>
            Cantidad de material a vender.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.TotalPrice">
            <summary>
            Precio total del producto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Empresa que vende el producto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Keywords">
            <summary>
            Palabras claves asignadas.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Disponibilidad de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de publicacion.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor">
            <summary>
            JsonConstructor para objetos Offer.
            </summary>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.Int32,ClassLibrary.Material,System.String,ClassLibrary.LocationAdapter,System.Int32,System.Double,ClassLibrary.Company,System.Boolean,System.DateTime)">
            <summary>
            Constructor de Offer.
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="availability"></param>
            <param name="publicationDate"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeQuantity(System.Int32)">
            <summary>
            Modifica la cantidad del material.
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeMaterial(ClassLibrary.Material)">
            <summary>
            Modifica el material
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeHabilitation(System.String)">
            <summary>
            Modifica las habilitaciones
            </summary>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangePrice(System.Int32)">
            <summary>
            Modifica el precio
            </summary>
            <param name="price"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:ClassLibrary.Offer.LoadFromJson(System.String)">
            <summary>
            Carga la oferta que esta en formato json para reconstruir el objeto
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.CompanyRegister">
            <summary>
            Esta clase representa un registro de empresas.
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.Instance">
            <summary>
            Se crea un Singelton de la clase CompanyRegister.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Initialize">
            <summary>
            Se crea la lista de empresas.
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.CompanyList">
            <summary>
            Lista de empresas registrados
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Add(ClassLibrary.Company)">
            <summary>
            Por la ley de demeter
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Remove(ClassLibrary.Company)">
            <summary>
            Método para remover empresas de la lista de empresas. Se crea por la ley de Demeter.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.GetCompanyByUserId(System.Int32)">
            <summary>
            Devuelva una empresa segun el id del user.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Contains(ClassLibrary.Company)">
            <summary>
            Por la ley de demeter
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.CreateCompany(System.String,ClassLibrary.LocationAdapter,System.String)">
            <summary>
            Crea un objeto Company y lo añade a los registros. Se coloco aqui el metodo por el patron Creator.
            </summary>
            <param name="nombre"></param>
            <param name="ubi"></param>
            <param name="headings"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase representa el mercado con sus ofertas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.Count">
            <summary>
            Genera un numero mayor que el anterior para el Id.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Market.Instance">
            <summary>
            Se crea un Singelton de la clase Market.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Market.ActualOfferList">
            <summary>
            Lista de ofertas actuales.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.Initialize">
            <summary>
            Se crea la lista de ofertas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.SuspendedOfferList">
            <summary>
            Lista de ofertas suspendidas.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.CreateOffer(ClassLibrary.Material,System.String,ClassLibrary.LocationAdapter,System.Int32,System.Double,ClassLibrary.Company,System.Boolean)">
            <summary>
            Crea y devuelve una nueva oferta. Creamos las ofertas aca por Creator.
            </summary>
            /// <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="availability"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.ContainsActive(ClassLibrary.Offer)">
            <summary>
            Por la ley de demeter se crea ContainsActive.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.ContainsSuspended(ClassLibrary.Offer)">
            <summary>
            Por la ley de demeter se crea ContainsSuspended.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.PublishOffer(ClassLibrary.Offer)">
            <summary>
            Añade una nueva oferta a la lista de ofertas actuales.
            </summary>
            <param name="newOffer"></param>
        </member>
        <member name="M:ClassLibrary.Market.RemoveOffer(System.Int32)">
            <summary>
            Retira la oferta de la lista de ofertas actuales.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.SearchOffers(System.String)">
            <summary>
            Devuelve una lista de ofertas que cumplan con un parametro de busqueda , ARREGLAR KEYWORDS ANTES
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.SuspendOffer(System.Int32)">
            <summary>
            Suspende una oferta actual.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.ResumeOffer(System.Int32)">
            <summary>
            A una oferta suspendida la vuelve a activar.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.ConvertToJson">
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.TokenRegister">
            <summary>
            Esta clase  representa un registro de tokens.
            </summary>
        </member>
        <member name="F:ClassLibrary.TokenRegister.TokenList">
            <summary>
            Diccionario con nombre de empresas y sus respectivos tokens habilitados.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.TokenRegister.Instance">
            <summary>
            Se crea un Singelton de la clase TokenRegister.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Initialize">
            <summary>
            Se crea diccionario para asociar un token con su respectiva empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.TokenRegister.GetCompany(System.String)">
            <summary>
            Devuelve la empresa a la cual le pertenece un codigo.
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Add(System.String,ClassLibrary.Company)">
            <summary>
            Metodo para añadir un token al diccionario de tokens.
            </summary>
            <param name="token"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Remove(System.String)">
            <summary>
            Metodo para remover un token del diccionario de tokens.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.IsValid(System.String)">
            <summary>
            Por la ley de demeter se crea Contains.
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.LoadFromJson(System.String)">
            <summary>
            Convierte el texto en formato Json a objeto.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.UserRegister">
            <summary>
            Esta clase representa un registro de usuarios.
            </summary>
        </member>
        <member name="P:ClassLibrary.UserRegister.DataUsers">
            <summary>
            Lista de usuarios registrados.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UserRegister.Instance">
            <summary>
            Instancia de UserRegister (COMENTAR SINGLETON)
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.UserRegister.Initialize">
            <summary>
            Se crea la lista de usuarios y se la guarda en la DataUsers.
            </summary>
        </member>
        <member name="M:ClassLibrary.UserRegister.CreateCompanyUser(ClassLibrary.IMessage,ClassLibrary.Company)">
            <summary>
            Crea un usuario empresa.
            </summary>
            <param name="input"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.CreateEntrepreneurUser(System.Int32,System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Crea un usuario emprendedor.
            </summary>
            <param name="input"></param>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitations"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.Add(ClassLibrary.Users)">
            <summary>
            Esto se hace por la ley de demeter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.Remove(ClassLibrary.Users)">
            <summary>
            Remueve un user de la lista. Por la ley de demeter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.ContainsUser(ClassLibrary.Users)">
            <summary>
            Por la ley de demeter se crea Contains.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.GetUserById(System.Int32)">
            <summary>
            Devuelve  un objeto user segun la id dada.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.LoadFromJson(System.String)">
            <summary>
            Convierte el texto en formato Json a obejto.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en texto en formato
            Json.
            </summary>
        </member>
        <member name="M:ClassLibrary.IJsonConvertible.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.Setup">
            <summary>
            Esta clase solo se encarga de crear la chain of responsability correspondiente para cada usuario
            por lo tanto cumple con el patron SRP. Tambien comple con el patron Creator porque utiliza, necesariamente, ya que es la encargada
            de construir los Handler para crear la CoR.
            </summary>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
            Esta clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Name">
            <summary>
            Nombre del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Heading">
            <summary>
            Rubro del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Habilitation">
            <summary>
            Habilitaciones del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Location">
            <summary>
            Ubicacion del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.BoughtList">
            <summary>
            Lista de compras pasadas del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.AddBoughtOffer(ClassLibrary.Offer)">
            <summary>
            Agrega una oferta comprada a la lista de oferta compradas
            </summary>
            <param name="offer"></param>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.#ctor(System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Constructor de objetos Entrepreneur
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="heading"></param>
            <param name="habilitation"></param>
        </member>
        <member name="T:ClassLibrary.Users">
            <summary>
            Esta clase representa un usuario.
            Decidimos crearla de esta manera porque solo tiene la responsabilidad de conocer los datos
            de un usuario asi cumple con el SRP, tambien decidimos que el Role sea un IRole por el LSP,
            asi al momento de crear un usuario se le puede otorgar cualquiera de los 3 roles (AdminRole,
            CompanyRole o EntrepreneurRole) ya que son subtipos de IRole.
            </summary>
        </member>
        <member name="F:ClassLibrary.Users.Role">
            <summary>
            Rol del usuario.
            </summary>
        </member>
        <member name="P:ClassLibrary.Users.Id">
            <summary>
            Id del usuario
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Users.#ctor(System.Int32,ClassLibrary.IRole)">
            <summary>
            Constructor de User
            </summary>
            <param name="id"></param>
            <param name="role"></param>
        </member>
        <member name="M:ClassLibrary.Users.IsCompanyUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.IsEntrepreneurUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario emprendedor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.IsAdminUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.ConvertToJson">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.AdminRole">
            <summary>
            Esta clase representa el rol de Admin
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.InviteCompany">
            <summary>
            Envia un token para que una compania se pueda unir al bot
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AdminRole.Data">
            <summary>
            Devuelve la data de un admin
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyRole">
            <summary>
            Esta clase representa el Rol de CompanyUser
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRole.Company">
            <summary>
            Devuelve la company a la que pertenece el user
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRole.#ctor(ClassLibrary.Company)">
            <summary>
            Constructor de CompanyRole
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CompanyRole.Data">
            <summary>
            Devuelve la data de un usuario empresa
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.EntrepreneurRole">
            <summary>
            Esta clase representa el Rol de EntrepreneurUser
            </summary>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.#ctor(System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Es el constructor de EntrepreneurRole
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.Data">
            <summary>
            Devuelve la data de un usuario emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IRole">
            <summary>
            Interface para los roles
            </summary>
        </member>
        <member name="M:ClassLibrary.IRole.RoleType">
            <summary>
            Se devuelve TipoRol
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IRole.Data">
            <summary>
            Nos devuelve la data del usuario en string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Singleton`1">
            <summary>
            Se crea la clase singleton para usar.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Singleton`1.Instance">
            <summary>
            metodo
            </summary>
            <value></value>
        </member>
    </members>
</doc>
