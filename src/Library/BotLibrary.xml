<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotLibrary</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase representa el Bot.
            </summary>
        </member>
        <member name="T:ClassLibrary.Chat">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ChatRecord">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="P:ClassLibrary.Company.Id">
            <summary>
            Id de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Name">
            <summary>
            Nombre de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Locations">
            <summary>
            Ubicacion/es de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.CompanyUsers">
            <summary>
            Lista de usuarios pertenecientes a la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Rubro">
            <summary>
            Rubro al que pertenece la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.OfferRegister">
            <summary>
            Ofertas realizadas por la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.ProducedMaterials">
            <summary>
            Materiales producidos por la empresa
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Company.AddUser(ClassLibrary.User)">
            <summary>
            A침ade un usuario a la lista de usuarios pertenecientes a la empresa
            </summary>
            <param name="userPar"></param>
        </member>
        <member name="T:ClassLibrary.Creator">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.messageChannel">
            <summary>
            Canal por el cual se envian los mensajes
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.Command">
            <summary>
            Se setea el pr칩ximo handler (nextHandler)
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al pr칩ximo handler
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.AdminStartHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminStartHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.InviteTokenGeneratorHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.InviteTokenGeneratorHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.InviteTokenGeneratorHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.CompanyUserHandler">
            <summary>
             HAndler
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyUnitPriceHandler">
            <summary>
            Handler para qu eel usario empresa pueda modifcar el precio por unidad de un determinado material en una oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler para publicar una nueva oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler">
            <summary>
            Handler para pausar una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.UnsuspendOfferHandler">
            <summary>
            h
            </summary>
        </member>
        <member name="M:ClassLibrary.UnsuspendOfferHandler.#ctor(ClassLibrary.IMessageChannel,ClassLibrary.IHandler)">
            <summary>
            Despausa una oferta determinada
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Ejecuci칩n del proceso de Handler
            </summary>
        </member>
        <member name="T:ClassLibrary.EndHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.#ctor(ClassLibrary.IMessageChannel,ClassLibrary.IHandler)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ModifyOffer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Quantity(ClassLibrary.Offer,System.Int32)">
            <summary>
            Modifica la cantidad de materiales en una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newQuantity"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Keywords(ClassLibrary.Offer,System.String)">
            <summary>
            Modifica las palabras claves de una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newKeyword"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Availability(ClassLibrary.Offer,System.Boolean)">
            <summary>
            Modifica la disponibilidad de una oferta
            </summary>
            <param name="newOffer"></param>
            <param name="newAvailability"></param>
        </member>
        <member name="M:ClassLibrary.ModifyOffer.Term(ClassLibrary.Offer,System.Int32)">
            <summary>
            Modifica el plazo de una oferta
            </summary>
            <param name="NewOffer"></param>
            <param name="NewExtendTerm"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Id">
            <summary>
            Id de la Oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Material que se vende en la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Habilitation">
            <summary>
            Habilitaciones necesarias para poder manejar el producto en venta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion en donde se encuentran el producto a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.QuantityMaterial">
            <summary>
            Cantidad de material a vender
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Empresa que vende el producto
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Keywords">
            <summary>
            Palabras claves asignadas
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Disponibilidad de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de publicacion de la oferta
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Term">
            <summary>
            Plazo de la oferta
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.Int32,ClassLibrary.Material,System.String,ClassLibrary.Location,System.Int32,ClassLibrary.Company,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            Constructor de Offer
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="company"></param>
            <param name="keywords"></param>
            <param name="availability"></param>
            <param name="publicationDate"></param>
            <param name="term"></param>
        </member>
        <member name="T:ClassLibrary.Register">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Register.Users">
            <summary>
            Lista de usuarios registrados
            </summary>
            <value></value>        
        </member>
        <member name="P:ClassLibrary.Register.CompanyList">
            <summary>
            Lista de companias registradas
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Register.AddCompany(ClassLibrary.Company)">
            <summary>
            A침ade una empresa a la lista de empresas registradas
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.Register.RemoveCompany(System.Int32)">
            <summary>
            Remueve una empresa de la lista de empresas registradas
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:ClassLibrary.TokenRegister">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Name">
            <summary>
            Nombre del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Heading">
            <summary>
            Rubro del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Habilitation">
            <summary>
            Habilitaciones del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Location">
            <summary>
            Ubicacion del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.BoughtList">
            <summary>
            Lista de compras pasadas del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.User">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="F:ClassLibrary.User.Role">
            <summary>
            Rol del usuario
            </summary>
        </member>
        <member name="P:ClassLibrary.User.Id">
            <summary>
            Id del usuario
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.User.#ctor(System.Int32,ClassLibrary.IRole)">
            <summary>
            Constructor del usuario
            </summary>
            <param name="idPar"></param>
        </member>
        <member name="M:ClassLibrary.AdminRole.InviteCompany">
            <summary>
            Envia un token para que una compania se pueda unir al bot
            </summary>
        </member>
    </members>
</doc>
