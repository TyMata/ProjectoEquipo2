<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BotLibrary</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase representa una empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.Company.Id">
            <summary>
            Id de la empresa
            </summary>
            <value></value> 
        </member>
        <member name="P:ClassLibrary.Company.Name">
            <summary>
            Nombre de la empresa
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Locations">
            <summary>
            Ubicacion/es de la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.CompanyUsers">
            <summary>
            Lista de usuarios pertenecientes a la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.InvitationToken">
            <summary>
            Token para que un ususuario empresa pueda registrarse.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.Headings">
            <summary>
            Rubro al que pertenece la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.OfferRegister">
            <summary>
            Ofertas realizadas por la empresa.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Company.ProducedMaterials">
            <summary>
            Materiales producidos por la empresa.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Company.#ctor">
            <summary>
            JsonConstructor de objetos Company.
            </summary>
        </member>
        <member name="M:ClassLibrary.Company.#ctor(System.String,ClassLibrary.LocationAdapter,System.String,System.String,System.String)">
            <summary>
            Constructor de objetos Company.
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddUser(System.Int32)">
            <summary>
            Añade un usuario a la lista de usuarios pertenecientes a la empresa, CREATOR, crea user ya que tiene  una lista de users.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveUser(System.Int32)">
            <summary>
            Remueve  un usuario de la lista de usuarios pertenecientes a la empresa.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.AddOffer(ClassLibrary.Offer)">
            <summary>
            Añade una oferta al registro de la empresa
            /// </summary>
            <param name="offer"></param>
        </member>
        <member name="M:ClassLibrary.Company.RemoveOffer(System.Int32)">
            <summary>
            Remueve una oferta del registro de ofertas de la empresa
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Company.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            TODO add token
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:ClassLibrary.Company.LoadFromJson(System.String)">
            <summary>
            Carga los datos del archivo en formato .json y reconstruye los objetos a partir de este
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.Company.GetMaterial(System.String)">
            <summary>
            Retorna un material segun el nombre de estes
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Company.GetLocation(System.String)">
            <summary>
            Devuelva una ubicacion dentro de la lista de ubicaciones de la empresa a partir de la dirección.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers.
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.nextHandler">
            <summary>
            Contiene al siguiente Handler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.Command">
            <summary>
            Palabra clave de Handler(comando).
            </summary>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Se setea el próximo handler (nextHandler).
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al próximo handler.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.CanHandle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el mensaje que recibe es igual al del comando.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Procesa el mensaje o lo manda al siguiente handler si no lo puede procesar.
            </summary>
            <param name="message">El mensaje a procesar</param>
            <param name="response">Respuesta a enviar</param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler">
            <summary>
            Handler encargado de delegar la accion de añadir una empresa nueva al registro
            </summary>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.State">
            <summary>
            Estado para el handler de AddCompany.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando AddCompanyHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.#ctor">
            <summary>
            Constructor de los objetos AddCompanyHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pide algunos datos de la empresa que se quiere registrar la crea.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="M:ClassLibrary.AddCompanyHandler.InternalCancel">
            <summary>
            Retorna este handler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler.AddCompanyState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddCompanyHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el nombre de la empresa a registrar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.Name">
            <summary>
            Luego de pedir el nombre de la empresa. En este estado el comando pide el país de la empresa y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.Country">
            <summary>
            Luego de pedir el país de la empresa. En este estado el comando pide el departamento de la empresa y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.State">
            <summary>
            Luego de pedir el departamento de la empresa. En este estado el comando pide la ciudad de la empresa y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.City">
            <summary>
            Luego de pedir la ciudad de la empresa. En este estado el comando pide la dirección de la empresa y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.Address">
            <summary>
            Luego de pedir la dirección de la empresa. En este estado el comando pide el rubro de la empresa y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddCompanyHandler.AddCompanyState.Headings">
            <summary>
            Luego de pedir el rubro de la empresa. En este estado el comando crea la empresa y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:ClassLibrary.AddCompanyHandler.AddCompanyData">
            <summary>
            Representa los datos que va obteniendo el comando AddCompanyHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Name">
            <summary>
            El nombre de la empresa que se ingresó en el estado CompanyState.Name.
            </summary>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Country">
            <summary>
            El país de la empresa que se ingresó en el estado CompanyState.Country.
            </summary>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Estate">
            <summary>
            El departamento de la empresa que se ingresó en el estado CompanyState.State.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.City">
            <summary>
            La ciudad de la empresa que se ingresó en el estado CompanyState.City.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Address">
            <summary>
            La dirección de la empresa que se ingresó en el estado CompanyState.Address.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Location">
            <summary>
            La ubicación completa de la empresa, creada a partir de los datos de ubicación recolectados anteriormente.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.Headings">
            <summary>
            El rubro de la empresa que se ingresó en el estado CompanyState.Headings.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddCompanyHandler.AddCompanyData.company">
            <summary>
            La empresa creada a partir de todos los datos recolectados anteriormente.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler">
            <summary>
            Handler encargado de delegar la accion de eliminar una empresa del registro.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.State">
            <summary>
            Estado para el handler de RemoveCompany.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando RemoveCompany.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.#ctor">
            <summary>
            Constructor de objetos RemoveCompanyHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el nombre de la empresa la cual se quiere eliminar y luego de 
            verificar que ya esta registrada, la elimina.
            De no estar registrada le avisa al usuario de esto.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="M:ClassLibrary.RemoveCompanyHandler.InternalCancel">
            <summary>
            Retorna este handler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState">
            <summary>
            Indica los diferentes estados que tiene AddCompanyHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el Id de la empresa a eliminar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveCompanyHandler.RemoveCompanyState.Company">
            <summary>
            Luego de pedir el Id de la empresa. En este estado el comando elimina la empresa si existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData">
            <summary>
            Representa los datos que va obteniendo el comando RemoveCompanyHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData.CompanyId">
            <summary>
            El Id de la empresa que se ingresó en el estado RemoveCompanyState.Company.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveCompanyHandler.RemoveCompanyData.Result">
            <summary>
            El resultado de la búsqueda de la empresa por medio del Id.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler">
            <summary>
            Handler encargado de delegar la accion de eliminar un usuario del registro.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.State">
            <summary>
            Estado para el handler de RemoveUser.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando RemoveUserHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.#ctor">
            <summary>
            Constructor de objetos RemoveUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el id del usuario que se quiere eliminar y si el usuario que se quiere eliminar esta registrado
            delega la accion de eliminarlo y lo informa por pantalla.
            De no ser asi lo informa por pantalla al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="M:ClassLibrary.RemoveUserHandler.InternalCancel">
            <summary>
            Retorna este handler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler.RemoveUserState">
            <summary>
            Indica los diferentes estados que tiene RemoveUserHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveUserHandler.RemoveUserState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el Id del usuario a eliminar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveUserHandler.RemoveUserState.User">
            <summary>
            Luego de pedir el Id del usuario. En este estado el comando elimina el usuario si existe y vuelve al estado Start.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveUserHandler.RemoveUserData">
            <summary>
            Representa los datos que va obteniendo el comando RemoveUserHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.RemoveUserData.UserId">
            <summary>
            El Id del usuario que se ingresó en el estado RemoveUserState.User.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveUserHandler.RemoveUserData.Result">
            <summary>
            El resultado de la búsqueda del usuario por medio del Id.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.AddMaterialHandler">
            <summary>
            Handler encargado de delegar la accion de añadir una empresa nueva al registro
            </summary>
        </member>
        <member name="P:ClassLibrary.AddMaterialHandler.State">
            <summary>
            Estado para el handler de AddCompany.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.AddMaterialHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando AddCompanyHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.AddMaterialHandler.#ctor">
            <summary>
            Constructor de los objetos AddCompanyHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.AddMaterialHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pide algunos datos de la empresa que se quiere registrar la crea.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="M:ClassLibrary.AddMaterialHandler.InternalCancel">
            <summary>
            Retorna este handler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.AddMaterialHandler.AddMaterialState">
            <summary>
            Indica los diferentes estados que puede tener el comando AddCompanyHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddMaterialHandler.AddMaterialState.Start">
            <summary>
            El estado inicial del comando. Aquí pide el nombre del material a registrar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="F:ClassLibrary.AddMaterialHandler.AddMaterialState.Name">
            <summary>
            Luego de pedir el nombre del material. En este estado el comando pide el tipo del material y pasa al siguiente estado.
            </summary>
        </member>
        <member name="T:ClassLibrary.AddMaterialHandler.AddMaterialData">
            <summary>
            Representa los datos que va obteniendo el comando AddCompanyHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.AddMaterialHandler.AddMaterialData.Name">
            <summary>
            El nombre de la empresa que se ingresó en el estado CompanyState.Name.
            </summary>
        </member>
        <member name="P:ClassLibrary.AddMaterialHandler.AddMaterialData.Classification">
            <summary>
            El departamento de la empresa que se ingresó en el estado CompanyState.State.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            /// </summary>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.State">
            <summary>
            Estado para el handler de ModifyHabilitations.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando ModifyPriceHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.#ctor">
            <summary>
            Constructor de objetos ModifyHabilitationsHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyHabilitationsHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de mostrar la lista de ofertas de la empresa y modificar la cantidad
            de materiales de la oferta indicada por el usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler.ModifyState">
            <summary>
            Indica los diferentes estados que tiene ModifyHabilitationsHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyHabilitationsHandler.ModifyState.Start">
            <summary>
            El estado inicial del comando. Aquí pregunta por el ID de la oferta oferta que se quiere 
            modificar y le muestra una lista de las ofertas actuales de la empresa.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyHabilitationsHandler.ModifyState.OfferList">
            <summary>
            En este estado se obtiene el id y pregunta por el link de las habilitaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyHabilitationsHandler.ModifyState.Modification">
            <summary>
            En este estado se obtiene el link. delega el proceso de modificacion y le informa al usuario.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler.ModifyOfferData">
            <summary>
            Representa los datos que va obteniendo el comando ModifyHabilitationsHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.ModifyOfferData.OfferId">
            <summary>
            La dirección que se ingresó en el estado ModifyState.OfferList.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyHabilitationsHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la oferta ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar el precio de una determinada oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.State">
            <summary>
            Estado para el handler de ModifyPriceHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando ModifyPriceHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ModifyPriceHandler.#ctor">
            <summary>
            Constructor de objetos ModifyPriceHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyPriceHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de mostrar la lista de ofertas de la empresa y modificar el precio
            de la oferta indicada por el usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler.ModifyState">
            <summary>
            Indica los diferentes estados que tiene ModifyPriceHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyPriceHandler.ModifyState.Start">
            <summary>
            El estado inicial del comando. Aquí pregunta por el ID de la oferta oferta que se quiere 
            modificar y le muestra una lista de las ofertas actuales de la empresa.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyPriceHandler.ModifyState.OfferList">
            <summary>
            En este estado se obtiene el id y pregunta por el link de las habilitaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyPriceHandler.ModifyState.Modification">
            <summary>
            En este estado se obtiene el link. delega el proceso de modificacion y le informa al usuario.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyPriceHandler.ModifyOfferData">
            <summary>
            Representa los datos que va obteniendo el comando ModifyHabilitationsHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.ModifyOfferData.OfferId">
            <summary>
            La dirección que se ingresó en el estado ModifyState.OfferList.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyPriceHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la oferta ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.State">
            <summary>
            Estado para el handler de ModifyQuantityHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando ModifyQuantityHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ModifyQuantityHandler.#ctor">
            <summary>
            Constructor de objetos ModifyQuantityHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.ModifyQuantityHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de mostrar la lista de ofertas de la empresa y modificar la cantidad
            de materiales de la oferta indicada por el usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler.ModifyState">
            <summary>
            Indica los diferentes estados que tiene ModifyQuantityHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyQuantityHandler.ModifyState.Start">
            <summary>
            El estado inicial del comando. Aquí pregunta por el ID de la oferta oferta que se quiere 
            modificar y le muestra una lista de las ofertas actuales de la empresa.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyQuantityHandler.ModifyState.OfferList">
            <summary>
            En este estado se obtiene el id y pregunta por el link de las habilitaciones.
            </summary>
        </member>
        <member name="F:ClassLibrary.ModifyQuantityHandler.ModifyState.Modification">
            <summary>
            En este estado se obtiene el link. delega el proceso de modificacion y le informa al usuario.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler.ModifyOfferData">
            <summary>
            Representa los datos que va obteniendo el comando ModifyQuantityHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.ModifyOfferData.Offer">
            <summary>
            El ID que se ingresó en el estado ModifyState.OfferList.
            </summary>
        </member>
        <member name="P:ClassLibrary.ModifyQuantityHandler.ModifyOfferData.Result">
            <summary>
            El resultado de la búsqueda de la oferta ingresada.
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler encargado de delegar la accion de crear y publicar una oferta en el registro
            </summary>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.State">
            <summary>
            Estado para el handler de PublishOfferHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando PublishOfferHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.#ctor">
            <summary>
            Constructor de objetos PublishOfferHandler
            </summary>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por los datos de la oferta a crear y delega la accion de crearla y publicarla
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler.OfferState">
            <summary>
            Indica los diferentes estados que tiene PublishOfferHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.PublishOfferHandler.OfferState.Start">
            <summary>
            El estado inicial del comando. Aquí pregunta por el material que se quiere vender
            y le muestra una lista de los materiales producidos por la empresa.
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler.OfferData">
            <summary>
            Representa los datos que va obteniendo el comando PublishOfferHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Material">
            <summary>
            Se guarda el material que se quiere agregar en la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Quantity">
            <summary>
            Se guarda la cantidad del material que se quiere poner en la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Price">
            <summary>
            Se guarda el precio total de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Habilitations">
            <summary>
            Se guardan las habilitaciones para manejar el material.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Offer">
            <summary>
            Se guarda la oferta creada con la informacion guardada previamente.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Location">
            <summary>
            Se guarda la ubicación de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.PublishOfferHandler.OfferData.Continuity">
            <summary>
            Se guarda la continuidad de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.RemoveOfferHandler">
            <summary>
            Handler encargado de delegar la accion de retirar una oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveOfferHandler.State">
            <summary>
            Estado para el handler de RemoveOfferHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.RemoveOfferHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando ModifyQuantityHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandler.#ctor">
            <summary>
            Constructor de objetos RemoveOfferHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasar por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de eliminarla.
            De no existir la oferta le avisa por pantalla al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="M:ClassLibrary.RemoveOfferHandler.InternalCancel">
            <summary>
            Retorna este IHandler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveOfferHandler.RemoveOfferState">
            <summary>
            Indica los diferentes estados que tiene RemoveOfferHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveOfferHandler.RemoveOfferState.Start">
            <summary>
            El estado inicial del comando. Aquí pregunta por el Id de la oferta oferta que se quiere 
            modificar y le muestra una lista de las ofertas actuales de la empresa.
            </summary>
        </member>
        <member name="F:ClassLibrary.RemoveOfferHandler.RemoveOfferState.IdOfferState">
            <summary>
            El estado en donde recibe la Id, se busca la oferta y se la remueve del mercado.
            </summary>
        </member>
        <member name="T:ClassLibrary.RemoveOfferHandler.RemoveOfferData">
            <summary>
            Representa los datos que va obteniendo el comando RemoveOfferHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.RemoveOfferHandler.RemoveOfferData.Id">
            <summary>
            El ID que se ingresó en el estado RemoveOfferHandler.OfferList.
            </summary>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler">
            <summary>
            Handler encargado de delegar la accion de volver a activar una oferta suspendida.
            </summary>
        </member>
        <member name="P:ClassLibrary.ResumeOfferHandler.State">
            <summary>
            Estado para este handler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ResumeOfferHandler.Data">
            <summary>
            Clase para guardar la informacion que envia el usuario por el chat cuando se le pregunta
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.#ctor">
            <summary>
            Constructor de objetos ResumeOfferHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.ResumeOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasar por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de volver a activarla.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler.ResumeOfferState">
            <summary>
            Enumerado de los estado de este handler
            </summary>
        </member>
        <member name="F:ClassLibrary.ResumeOfferHandler.ResumeOfferState.Start">
            <summary>
            Estado con el que comienza el handler, en este se le muestra sus ofertas actuales y pide el id de la que quiere reanudar.
            </summary>
        </member>
        <member name="F:ClassLibrary.ResumeOfferHandler.ResumeOfferState.SuspendedOfferIdState">
            <summary>
            Estado en donde se guarda la Id que envio el usuario y se reanuda la oferta en el mercado.
            </summary>
        </member>
        <member name="T:ClassLibrary.ResumeOfferHandler.ResumeOfferData">
            <summary>
            Guarda la id que envia el usuario por el chat para luego ser usada.
            </summary>
        </member>
        <member name="P:ClassLibrary.ResumeOfferHandler.ResumeOfferData.Id">
            <summary>
            Se guarada la Id.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler">
            <summary>
            Handler encargado de delegar la accion de suspender una oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.SuspendOfferHandler.State">
            <summary>
            Estado para este handler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.SuspendOfferHandler.Data">
            <summary>
            Clase para guardar la informacion que envia el usuario por el chat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandler.#ctor">
            <summary>
            Constructor de objetos SuspendOfferHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.SuspendOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Se encarga de pasar por pantalla la lista de ofertas actuales y luego de recibir un Id
            de una oferta delega la accion de suspenderla.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler.SuspendOfferState">
            <summary>
            Enumerado de los estados de este handler.
            </summary>
        </member>
        <member name="F:ClassLibrary.SuspendOfferHandler.SuspendOfferState.Start">
            <summary>
            Estado con el que comienza. Se le muestra todas las ofertas actuales de su empresa y se le pregunta por el Id de la que quiere Suspender.
            </summary>
        </member>
        <member name="F:ClassLibrary.SuspendOfferHandler.SuspendOfferState.ActiveOfferIdState">
            <summary>
            Estado en donde se guarda el Id que envio el usuario por el chat, se busca en las ofertas actuales de la empresa si esta existe y si es asi se la suspende en el mercado.
            </summary>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler.SuspendOfferData">
            <summary>
            Clase para guardar la información que envia el usuario por el chat.
            </summary>
        </member>
        <member name="P:ClassLibrary.SuspendOfferHandler.SuspendOfferData.Id">
            <summary>
            Se guarda el Id de la oferta  a suspender.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.EndHandler">
            <summary>
            Handler encargado de darle final a la CoR.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.#ctor(ClassLibrary.IHandler)">
            <summary>
            Constructor de objetos EndHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.EndHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Le avisa al usuario que el comando no se reconocio y 
            va denuevo al primer handler de la cadena.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.SearchOfferHandler">
            <summary>
            Handler encargado de delegar la accion de buscar ofertas por keywords.
            </summary>
        </member>
        <member name="P:ClassLibrary.SearchOfferHandler.State">
            <summary>
            Estado para el handler de SearchOfferHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.SearchOfferHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando SearchOfferHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.SearchOfferHandler.#ctor">
            <summary>
            Constructor de objetos SearchOfferByKeyWordsHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.SearchOfferHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            /// Se encarga de mostrar la lista de ofertas asociadas a las keywords.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.SearchOfferHandler.InternalCancel">
            <summary>
            Retorna este handler al estado inicial.
            </summary>
        </member>
        <member name="T:ClassLibrary.SearchOfferHandler.SearchOfferState">
            <summary>
            Indica los diferentes estados que puede tener el comando SearchOfferHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.SearchOfferHandler.SearchOfferState.Start">
            <summary>
            El estado inicial del comando. Aquí pide las palabras claves de la ofertas a buscar.
            </summary>
        </member>
        <member name="F:ClassLibrary.SearchOfferHandler.SearchOfferState.ShowActiveState">
            <summary>
            Luego de pedir las palabras claves de las ofertas. En este estado el comando devuelve todas las ofertas
            existentes, que cumplan con los requisitos. Además sugiere la posibilidad de seleccionar una oferta única por medio de una Id.
            </summary>
        </member>
        <member name="F:ClassLibrary.SearchOfferHandler.SearchOfferState.AskActiveOfferIdState">
            <summary>
            Luego de pedir el Id de la oferta a comprar. En este estado el comando devuelve la oferta seleccionada y pregunta si es esa la que el usuario quiere comprar.
            </summary>
        </member>
        <member name="F:ClassLibrary.SearchOfferHandler.SearchOfferState.BuyOfferState">
            <summary>
            .
            </summary>
        </member>
        <member name="T:ClassLibrary.SearchOfferHandler.SearchOfferData">
            <summary>
            Representa los datos que va obteniendo el comando SearchOfferHandler en los diferentes estados.
            </summary>
        </member>
        <member name="P:ClassLibrary.SearchOfferHandler.SearchOfferData.Offers">
            <summary>
            La lista de ofertas que se mostrará al emprendedor una vez haya enviado las palabras claves.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase representa los handlers.
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Verifica si se realiza el proceso o se lo manda al next handler.
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Ejecución del proceso de Handler.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.StartHandler">
            <summary>
            Primer Handler de la CoR.
            </summary>
        </member>
        <member name="P:ClassLibrary.StartHandler.State">
            <summary>
            Estado para el handler de StartHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.StartHandler.#ctor">
            <summary>
            Constructor de los objetos StartHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.StartHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Le otorga por pantalla los comandos que puede utilizar.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.StartHandler.StartState">
            <summary>
            Indica los diferentes estados que puede tener el comando StartHandler.
            </summary>
        </member>
        <member name="F:ClassLibrary.StartHandler.StartState.Start">
            <summary>
            El estado inicial del comando. Aquí pide un comando a ejecutar y pasa al siguiente estado.
            </summary>
        </member>
        <member name="T:ClassLibrary.StartHandler.RemoveUserData">
            <summary>
            Se crea la clase RemoveUserData para cuando se desea eliminar un usuario  de la UserData.
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Handler encargado de delegar la accion de registrar un usuario empresa.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredCompanyUserHandler.State">
            <summary>
            Estado para el handler de UnregisteredCompanyUserState .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredCompanyUserHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando UnregisteredCompanyUserHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor">
            <summary>
            Constructor de objetos UnregistredCompanyUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por el codigo de invitacion y delega la tarea de verificar si el token es valido 
            y la creacion de el usuario empresa.
            De no ser asi se le avisa al usuario.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler.UnregisteredCompanyUserState">
            <summary>
            Estados para el handler de un CompanyUser no registrado
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler.UnregisteredCompanyUserData">
            <summary>
            Se guardan los datos que el usuario pasa por el chat.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredCompanyUserHandler.UnregisteredCompanyUserData.Token">
            <summary>
            El Token que se ingresó en el estado UnregisteredCompanyUserState.Token.
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepreneurUserHandler">
            <summary>
            Handler encargado de crear un usuario emprendedor.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.State">
            <summary>
            Estado para el handler de UnregisteredEntrepreneurUserHandler.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.Data">
            <summary>
            Guarda la información que pasa el usuario por el chat cuando se utiliza el comando UnregisteredEntrepreneurUserHandler.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepreneurUserHandler.#ctor">
            <summary>
            Constructor de objetos UnregistredEntrepreneurUserHandler.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepreneurUserHandler.InternalHandle(ClassLibrary.IMessage,System.String@)">
            <summary>
            Pregunta por los datos del emprendedor y delega la tarea de crear un usuario emprendedor.
            </summary>
            <param name="input"></param>
            <param name="response"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserState">
            <summary>
            Estados para el handler de un emprendedor no registrado
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData">
            <summary>
            Se guardan los datos que el usuario pasa por el chat.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.Name">
            <summary>
            El nombre que se ingresó en el estado UnregisteredCompanyUserState.Name.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.Address">
            <summary>
            se guarda la dirección que se ingresó en el estado UnregisteredEntrepreneurUserState.Addres .
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.City">
            <summary>
            Se guarda la ciudad que se ingresó en el estado UnregisteredEntrepreneurUserState.City .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.Department">
            <summary>
            Se guarda eL departamento que se ingresó en el estado UnregisteredEntrepreneurUserState.Department .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.LocationResult">
            <summary>
            El resultado de la búsqueda de la dirección ingresada.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.Habilitations">
            <summary>
            El link a las habilitaciones que se ingresó en el estado UnregisteredCompanyUserState.Habilitations.
            </summary>
        </member>
        <member name="P:ClassLibrary.UnregisteredEntrepreneurUserHandler.UnregisteredEntrepreneurUserData.Headings">
            <summary>
            El rubro que se ingresó en el estado UnregisteredCompanyUserState.Headings.
            </summary>
        </member>
        <member name="T:ClassLibrary.LocationAdapter">
            <summary>
            Esta clase representa una ubicacion
            </summary>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Found">
            <summary>
            Devuelve si la ubicacion existe o no
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Latitude">
            <summary>
            devuelve y guarda la latitud de la ubicacion.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Longitude">
            <summary>
            Devuelve la longitud de la ubicacion
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.PostalCode">
            <summary>
            Devuelve y guarda el codigo postal de la ubicación.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Address">
            <summary>
            Devuelve y guarda la dirección. 
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.City">
            <summary>
            Devuelve y guarda la ciudad.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.LocationAdapter.Department">
            <summary>
            Devuelve y guarda el departamento.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.LocationAdapter.#ctor(System.String,System.String,System.String)">
            <summary>
            Adaptador de la Location Api
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="department"></param>
        </member>
        <member name="M:ClassLibrary.LocationAdapter.GetDistance(System.String,System.String,System.String)">
            <summary>
            Retorna la distancia entre dos locations
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="department"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.LocationAdapter.GetDuration(System.String,System.String,System.String)">
            <summary>
            REtorna la duracion entre dos locaciones
            </summary>
            <param name="address"></param>
            <param name="city"></param>
            <param name="department"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase representa un material.
            </summary>
        </member>
        <member name="P:ClassLibrary.Material.Name">
            <summary>
            Devuelve el tipo de objeto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Type">
            <summary>
            Devuelve el tipo de material.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Material.Classification">
            <summary>
            Devuelve la clasificacion del material.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Material.#ctor">
            <summary>
            JsonConstructor para objetos Material.
            </summary>
        </member>
        <member name="M:ClassLibrary.Material.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de objetos Material.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="classification"></param>
        </member>
        <member name="M:ClassLibrary.Material.ConvertToJson">
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage.
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.SendMessage(System.String)">
            <summary>
            Recibe el string mensaje y lo muestra por consola.
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el .
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message.
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.TelegramBotMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.TelegramBotMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.TelegramBotMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.TelegramBotMessage.#ctor(System.Int32,System.String)">
            <summary>
            Se crea el constructor de TelegramBotMessage que tiene como parametros id y text.
            </summary>
            <param name="id"></param>
            <param name="text"></param>
        </member>
        <member name="T:ClassLibrary.TelegramBotMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.TelegramBotMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TelegramBotMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase representa una oferta.
            </summary>
        </member>
        <member name="P:ClassLibrary.Offer.Id">
            <summary>
            Id de la oferta.
            </summary>
            <value></value> 
        </member>
        <member name="P:ClassLibrary.Offer.Material">
            <summary>
            Material que se vende en la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Habilitation">
            <summary>
            Habilitaciones necesarias para poder manejar el producto en venta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Location">
            <summary>
            Ubicacion en donde se encuentran el producto a vender.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.QuantityMaterial">
            <summary>
            Cantidad de material a vender.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.TotalPrice">
            <summary>
            Precio total del producto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Company">
            <summary>
            Empresa que vende el producto.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Keywords">
            <summary>
            Palabras claves asignadas.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.Availability">
            <summary>
            Disponibilidad de la oferta.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Offer.PublicationDate">
            <summary>
            Fecha de publicacion.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor">
            <summary>
            JsonConstructor para objetos Offer.
            </summary>
        </member>
        <member name="M:ClassLibrary.Offer.#ctor(System.Int32,ClassLibrary.Material,System.String,ClassLibrary.LocationAdapter,System.Int32,System.Double,ClassLibrary.Company,System.Boolean,System.DateTime,System.String)">
            <summary>
            Constructor de Offer.
            </summary>
            <param name="id"></param>
            <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="availability"></param>
            <param name="publicationDate"></param>
            <param name="continuity"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeQuantity(System.Int32)">
            <summary>
            Modifica la cantidad del material.
            </summary>
            <param name="quantity"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeMaterial(ClassLibrary.Material)">
            <summary>
            Modifica el material
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeHabilitation(System.String)">
            <summary>
            Modifica las habilitaciones
            </summary>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangePrice(System.Int32)">
            <summary>
            Modifica el precio
            </summary>
            <param name="price"></param>
        </member>
        <member name="M:ClassLibrary.Offer.ChangeAvailability">
            <summary>
            Modifica el precio
            </summary>
        </member>
        <member name="M:ClassLibrary.Offer.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:ClassLibrary.Offer.LoadFromJson(System.String)">
            <summary>
            Carga la oferta que esta en formato json para reconstruir el objeto
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.CompanyRegister">
            <summary>
            Esta clase representa un registro de empresas.
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.Instance">
            <summary>
            Se crea un Singelton de la clase CompanyRegister.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Initialize">
            <summary>
            Se crea la lista de empresas.
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRegister.CompanyList">
            <summary>
            Lista de empresas registrados
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Add(ClassLibrary.Company)">
            <summary>
            Por la ley de demeter
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Remove(ClassLibrary.Company)">
            <summary>
            Método para remover empresas de la lista de empresas. Se crea por la ley de Demeter.
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.GetCompanyByUserId(System.Int32)">
            <summary>
            Devuelva una empresa segun el id del user.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.Contains(ClassLibrary.Company)">
            <summary>
            Por la ley de demeter
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.CreateCompany(System.String,ClassLibrary.LocationAdapter,System.String,System.String,System.String)">
            <summary>
            Crea un objeto Company y lo añade a los registros. Se coloco aqui el metodo por el patron Creator.
            </summary>
            <param name="nombre"></param>
            <param name="location"></param>
            <param name="headings"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRegister.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase representa el mercado con sus ofertas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.Count">
            <summary>
            Genera un numero mayor que el anterior para el Id.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Market.Instance">
            <summary>
            Se crea un Singelton de la clase Market.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.Initialize">
            <summary>
            Se crea la lista de ofertas.
            </summary>
        </member>
        <member name="P:ClassLibrary.Market.ActualOfferList">
            <summary>
            Lista de ofertas actuales.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Market.SuspendedOfferList">
            <summary>
            Lista de ofertas suspendidas.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Market.CreateOffer(ClassLibrary.Material,System.String,ClassLibrary.LocationAdapter,System.Int32,System.Double,ClassLibrary.Company,System.Boolean,System.String)">
            <summary>
            Crea y devuelve una nueva oferta. Creamos las ofertas aca por Creator.
            </summary>
            /// <param name="material"></param>
            <param name="habilitation"></param>
            <param name="location"></param>
            <param name="quantityMaterial"></param>
            <param name="totalPrice"></param>
            <param name="company"></param>
            <param name="availability"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.ContainsActive(ClassLibrary.Offer)">
            <summary>
            Por la ley de demeter se crea ContainsActive.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.ContainsSuspended(ClassLibrary.Offer)">
            <summary>
            Por la ley de demeter se crea ContainsSuspended.
            </summary>
            <param name="offer"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.PublishOffer(ClassLibrary.Offer)">
            <summary>
            Añade una nueva oferta a la lista de ofertas actuales.
            </summary>
            <param name="newOffer"></param>
        </member>
        <member name="M:ClassLibrary.Market.RemoveOffer(System.Int32)">
            <summary>
            Retira la oferta de la lista de ofertas actuales.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.SearchOffers(System.String)">
            <summary>
            Devuelve una lista de ofertas que cumplan con un parametro de busqueda , ARREGLAR KEYWORDS ANTES
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Market.SuspendOffer(System.Int32)">
            <summary>
            Suspende una oferta actual.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.ResumeOffer(System.Int32)">
            <summary>
            A una oferta suspendida la vuelve a activar.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:ClassLibrary.Market.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte un objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.TokenRegister">
            <summary>
            Esta clase  representa un registro de tokens.
            </summary>
        </member>
        <member name="F:ClassLibrary.TokenRegister.TokenList">
            <summary>
            Diccionario con nombre de empresas y sus respectivos tokens habilitados.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClassLibrary.TokenRegister.Instance">
            <summary>
            Se crea un Singelton de la clase TokenRegister.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Initialize">
            <summary>
            Se crea diccionario para asociar un token con su respectiva empresa.
            </summary>
        </member>
        <member name="M:ClassLibrary.TokenRegister.GetCompany(System.String)">
            <summary>
            Devuelve la empresa a la cual le pertenece un codigo.
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Add(System.String,ClassLibrary.Company)">
            <summary>
            Metodo para añadir un token al diccionario de tokens.
            </summary>
            <param name="token"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.Remove(System.String)">
            <summary>
            Metodo para remover un token del diccionario de tokens.
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.IsValid(System.String)">
            <summary>
            Por la ley de demeter se crea Contains.
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.TokenRegister.LoadFromJson(System.String)">
            <summary>
            Convierte el texto en formato Json a objeto.
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:ClassLibrary.TokenRegister.GenerateToken">
            /// <summary>
            Se genera un  token para una nueva empresa y se lo añade al diccionario, por expert est aaca
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.UserRegister">
            <summary>
            Esta clase representa un registro de usuarios.
            </summary>
        </member>
        <member name="P:ClassLibrary.UserRegister.DataUsers">
            <summary>
            Lista de usuarios registrados.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.UserRegister.Instance">
            <summary>
            Instancia de UserRegister (COMENTAR SINGLETON)
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.UserRegister.Initialize">
            <summary>
            Se crea la lista de usuarios y se la guarda en la DataUsers.
            </summary>
        </member>
        <member name="M:ClassLibrary.UserRegister.CreateCompanyUser(ClassLibrary.IMessage,ClassLibrary.Company)">
            <summary>
            Crea un usuario empresa.
            </summary>
            <param name="input"></param>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.CreateEntrepreneurUser(System.Int32,System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Crea un usuario emprendedor.
            </summary>
            <param name="id"></param>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitations"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.Add(ClassLibrary.Users)">
            <summary>
            Esto se hace por la ley de demeter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.Remove(ClassLibrary.Users)">
            <summary>
            Remueve un user de la lista. Por la ley de demeter.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ClassLibrary.UserRegister.ContainsUser(ClassLibrary.Users)">
            <summary>
            Por la ley de demeter se crea Contains.
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.GetUserById(System.Int32)">
            <summary>
            Devuelve  un objeto user segun la id dada.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.UserRegister.LoadFromJson(System.String)">
            <summary>
            Convierte el texto en formato Json a obejto.
            </summary>
            <param name="json"></param>
        </member>
        <member name="T:ClassLibrary.IJsonConvertible">
            <summary>
            Define el tipo que tienen los objetos que pueden ser serializados en texto en formato
            Json.
            </summary>
        </member>
        <member name="M:ClassLibrary.IJsonConvertible.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="M:ClassLibrary.TelegramBot.HandleErrorAsync(System.Exception,System.Threading.CancellationToken)">
            <summary>
            Manejo de excepciones. Por ahora simplemente la imprimimos en la consola.
            </summary>
        </member>
        <member name="T:ClassLibrary.Entrepreneur">
            <summary>
            Esta clase.
            </summary>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Name">
            <summary>
            Nombre del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Heading">
            <summary>
            Rubro del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Habilitation">
            <summary>
            Habilitaciones del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.Location">
            <summary>
            Ubicacion del emprendedor
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.Entrepreneur.BoughtList">
            <summary>
            Lista de compras pasadas del emprendedor.
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.#ctor(System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Constructor de objetos Entrepreneur
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="heading"></param>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.Entrepreneur.AddBoughtOffer(ClassLibrary.Offer)">
            <summary>
            Agrega una oferta comprada a la lista de oferta compradas
            </summary>
            <param name="offer"></param>
        </member>
        <member name="T:ClassLibrary.Users">
            <summary>
            Esta clase representa un usuario.
            Decidimos crearla de esta manera porque solo tiene la responsabilidad de conocer los datos
            de un usuario asi cumple con el SRP, tambien decidimos que el Role sea un IRole por el LSP,
            asi al momento de crear un usuario se le puede otorgar cualquiera de los 3 roles (AdminRole,
            CompanyRole o EntrepreneurRole) ya que son subtipos de IRole.
            </summary>
        </member>
        <member name="F:ClassLibrary.Users.Role">
            <summary>
            Rol del usuario.
            </summary>
        </member>
        <member name="P:ClassLibrary.Users.Id">
            <summary>
            Id del usuario
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.Users.#ctor(System.Int32,ClassLibrary.IRole)">
            <summary>
            Constructor de User
            </summary>
            <param name="id"></param>
            <param name="role"></param>
        </member>
        <member name="M:ClassLibrary.Users.IsCompanyUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario empresa.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.IsEntrepreneurUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario emprendedor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.IsAdminUser">
            <summary>
            Booleano para comprobar que un usuario es un usuario admin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.Users.ConvertToJson(System.Text.Json.JsonSerializerOptions)">
            <summary>
            Convierte el objeto a texto en formato Json. El objeto puede ser reconstruido a partir del texto en formato
            Json utilizando JsonSerializer.Deserialize.
            </summary>
            <returns>El objeto convertido a texto en formato Json.</returns>
        </member>
        <member name="T:ClassLibrary.AdminRole">
            <summary>
            Esta clase representa el rol de Admin
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.InviteCompany">
            <summary>
            Envia un token para que una compania se pueda unir al bot
            </summary>
        </member>
        <member name="M:ClassLibrary.AdminRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AdminRole.Data">
            <summary>
            Devuelve la data de un admin
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyRole">
            <summary>
            Esta clase representa el Rol de CompanyUser
            </summary>
        </member>
        <member name="P:ClassLibrary.CompanyRole.Company">
            <summary>
            Devuelve la company a la que pertenece el user
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.CompanyRole.#ctor(ClassLibrary.Company)">
            <summary>
            Constructor de CompanyRole
            </summary>
            <param name="company"></param>
        </member>
        <member name="M:ClassLibrary.CompanyRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.CompanyRole.Data">
            <summary>
            Devuelve la data de un usuario empresa
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.EntrepreneurRole">
            <summary>
            Esta clase representa el Rol de EntrepreneurUser
            </summary>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.#ctor(System.String,ClassLibrary.LocationAdapter,System.String,System.String)">
            <summary>
            Es el constructor de EntrepreneurRole
            </summary>
            <param name="name"></param>
            <param name="location"></param>
            <param name="headings"></param>
            <param name="habilitation"></param>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.RoleType">
            <summary>
            Devuelve el tipo de Rol como string
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.EntrepreneurRole.Data">
            <summary>
            Devuelve la data de un usuario emprendedor
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.IRole">
            <summary>
            Interface para los roles
            </summary>
        </member>
        <member name="M:ClassLibrary.IRole.RoleType">
            <summary>
            Se devuelve TipoRol
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IRole.Data">
            <summary>
            Nos devuelve la data del usuario en string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Singleton`1">
            <summary>
            Se crea la clase singleton para usar.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Singleton`1.Instance">
            <summary>
            metodo
            </summary>
            <value></value>
        </member>
    </members>
</doc>
