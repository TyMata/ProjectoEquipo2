<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:ClassLibrary.Bot">
            <summary>
            Esta clase representa el Bot.
            </summary>
        </member>
        <member name="T:ClassLibrary.Chat">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ChatRecord">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Company">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.Creator">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.AbstractHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="F:ClassLibrary.AbstractHandler.messageChannel">
            <summary>
            Canal por el cual se envian los mensajes
            </summary>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Se setea el pr칩ximo handler (nextHandler)
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.AbstractHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el comando recibido es el perteneciente a esta clase, y ejecuta el workflow, o le pasa al pr칩ximo handler
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.CompanyUserHandler">
            <summary>
             HAndler
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyHabilitationsHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar las habilitaciones de una determinada oferta.
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyQuantityHandler">
            <summary>
            Handler para que el usuario empresa pueda modificar la cantidad de material en una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.ModifyUnitPriceHandler">
            <summary>
            Handler para qu eel usario empresa pueda modifcar el precio por unidad de un determinado material en una oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.PublishOfferHandler">
            <summary>
            Handler para publicar una nueva oferta
            </summary>
        </member>
        <member name="M:ClassLibrary.PublishOfferHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:ClassLibrary.SuspendOfferHandler">
            <summary>
            Handler para pausar una determinada oferta
            </summary>
        </member>
        <member name="T:ClassLibrary.UnsuspendOfferHandler">
            <summary>
            h
            </summary>
        </member>
        <member name="M:ClassLibrary.UnsuspendOfferHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Despausa una oferta determinada
            </summary>
            <param name="channel"></param>
        </member>
        <member name="T:ClassLibrary.IHandler">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="M:ClassLibrary.IHandler.SetNext(ClassLibrary.IHandler)">
            <summary>
            Pasa el mensaje al proximo Handler
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:ClassLibrary.IHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Ejecuci칩n del proceso de Handler
            </summary>
        </member>
        <member name="T:ClassLibrary.UnregisteredCompanyUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredCompanyUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredEntrepeneurUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredEntrepeneurUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.UnregisteredUserHandler">
            <summary>
            Marcamos el formato del resto de handlers
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.#ctor(ClassLibrary.IMessageChannel)">
            <summary>
            Handler para los usuarios no registrados.
            </summary>
        </member>
        <member name="M:ClassLibrary.UnregisteredUserHandler.Handle(ClassLibrary.IMessage)">
            <summary>
            Verifica si el usuario que emite el mensaje esta registrado
            y de no ser asi lo ayuda a registrarse
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:ClassLibrary.Location">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.Market">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Material">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.ConsoleMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.ConsoleMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="M:ClassLibrary.ConsoleMessage.#ctor(System.String)">
            <summary>
            Constructor de ConsoleMessage
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ConsoleMessageChannel">
            <summary>
            Esta clase representa el canal de mensajes por Consola.
            </summary>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje por consola y lo devuelve en un objeto IMessage
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.ConsoleMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.IMessage">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="P:ClassLibrary.IMessage.Id">
            <summary>
            Devuelve el Id
            </summary>
            <value></value>
        </member>
        <member name="P:ClassLibrary.IMessage.Text">
            <summary>
            Devuelve el Message
            </summary>
            <value></value>
        </member>
        <member name="T:ClassLibrary.IMessageChannel">
            <summary>
            Esta clase representa los mensajes.
            </summary>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.ReceiveMessage">
            <summary>
            Recibe un mensaje y devuelve un IMessage a partir del mensaje recibido
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClassLibrary.IMessageChannel.SendMessage(System.String)">
            <summary>
            
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="T:ClassLibrary.ModifyOffer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Offer">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Register">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.Train">
            <summary>
            Esta clase representa un tren muy b치sico.
            </summary>
        </member>
        <member name="P:ClassLibrary.Train.IsEngineStarted">
            <summary>
            Obtiene un valor que indica si las maquinas del tren han sido encendidas o no.
            </summary>
            <value><c>true</c> si las m치quinas fueron encendidas, <c>false</c> en caso contrario.</value>
        </member>
        <member name="M:ClassLibrary.Train.StartEngines">
            <summary>
            Enciende las m치quinas del tren.
            </summary>
            <returns>
            <c>true</c> si las m치quinas pueden ser encendidas, <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:ClassLibrary.Train.StopEngines">
            <summary>
            Detiene las m치quinas del tren.
            </summary>
            <returns>
            <c>true</c> si las m치quinas pueden ser detenidas, <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:ClassLibrary.AdminUser">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.CompanyUser">
            <summary>
            Esta clase
            </summary>
        </member>
        <member name="T:ClassLibrary.EntrepeneurUser">
            <summary>
            Esta clase 
            </summary>
        </member>
        <member name="T:ClassLibrary.User">
            <summary>
            Esta clase 
            </summary>
        </member>
    </members>
</doc>
