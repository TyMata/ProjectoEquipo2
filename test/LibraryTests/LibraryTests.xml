<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="T:Tests.CompanyRegisterTest">
            <summary>
            Prueba de la clase del registro de empresas.
            </summary>
        </member>
        <member name="M:Tests.CompanyRegisterTest.SetUp">
            <summary>
            Set up del test de CompanyRegister.
            </summary>
        </member>
        <member name="M:Tests.CompanyRegisterTest.AddTest">
            <summary>
            Prueba que se agregue una empresa al registro.
            </summary>
        </member>
        <member name="M:Tests.CompanyRegisterTest.RemoveTest">
            <summary>
            Prueba que se remueva una empresa del registro de empresas.
            </summary>
        </member>
        <member name="M:Tests.CompanyRegisterTest.GetCompanyByUserIdTest">
            <summary>
            Prueba que GetCompanyByUserId devuelva una empresa, y que sea la correcta.
            </summary>
        </member>
        <member name="T:Tests.CompanyRoleTests">
            <summary>
            Prueba de la clase <see cref="T:ClassLibrary.CompanyRole"/>.
            </summary>
        </member>
        <member name="M:Tests.CompanyRoleTests.SetUp">
            <summary>
            Se crea una company y su role para las  pruebas.
            </summary>
        </member>
        <member name="M:Tests.CompanyRoleTests.CompanyTests">
            <summary>
            Prueba que la empresa dentro de CompanyRole no sea nula.
            </summary>
        </member>
        <member name="M:Tests.CompanyRoleTests.RoleTypeTest">
            <summary>
            Prueba que TipoRole() devuelve la string "company".
            </summary>
        </member>
        <member name="M:Tests.CompanyRoleTests.DataTest">
            <summary>
            Prueba que la información del usuario no este vacía.
            </summary>
        </member>
        <member name="T:Tests.CompanyTest">
            <summary>
            Test de la clase <see cref="T:ClassLibrary.Company"/>.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.SetUp">
            <summary>
            Se crean variables con los parametros para crear una empresa.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.CompanyNameTest">
            <summary>
            Prueba que el nombre no sea nulo.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.AddUserTest">
            <summary>
            Prueba que se añada el usuario a los usuarios de la empresa.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.RemoveUserTest">
            <summary>
            Prueba que se remueva un usuario determinado de los usuarios de la empresa.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.ProducedMaterialsTest">
            <summary>
            Prueba que se agreguen los materiales a la lista de materiales.
            </summary>
        </member>
        <member name="M:Tests.CompanyTest.GetMaterialTest">
            <summary>
            Prueba que el metodo GetMAterial de company devuelva el material correcto y que no sea nulo.
            </summary>
        </member>
        <member name="T:Tests.EntrepreneurRoleTests">
            <summary>
            Prueba de la clase <see cref="T:ClassLibrary.EntrepreneurRole"/>.
            </summary>
        </member>
        <member name="M:Tests.EntrepreneurRoleTests.SetUp">
            <summary>
            Se crea un EntrepreneurRole para las pruebas.
            </summary>
        </member>
        <member name="M:Tests.EntrepreneurRoleTests.DataTest">
            <summary>
            Prueba que la información del usuario no este vacía.
            </summary>
        </member>
        <member name="T:Tests.AddCompanyHandlerTests">
            <summary>
            Prueba el handler <see cref="T:ClassLibrary.AddCompanyHandler"/>
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.SetUp">
            <summary>
            Se crea el handler a probar y un IMessage.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleCompanyTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleCountryTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleDepartmentTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleAddressTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleHeadingsTest">
            <summary>
            Prueba que el InternalHandle se hag correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.HandleFinalTest">
            <summary>
            Prueba que el InternalHandle se hag correctamente, cambie el estado del handler y que se haya creado la empresa.
            </summary>
        </member>
        <member name="M:Tests.AddCompanyHandlerTests.DoesNotHandle">
            <summary>
            Prueba que el InternalHandle no se haga ya que no se envia el mensaje correcto y qu eno cambie el estado del handler.
            </summary>
        </member>
        <member name="T:Tests.ModifyHabilitationsHandlerTests">
            <summary>
            Prueba el handler para modificar las habilitaciones en una oferta.
            </summary>
        </member>
        <member name="M:Tests.ModifyHabilitationsHandlerTests.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.ModifyHabilitationsHandlerTests.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.ModifyHabilitationsHandlerTests.HandleOfferListTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.ModifyHabilitationsHandlerTests.HandleFinaleTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial
             y que se cambien las habilitaciones del material de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.ModifyHabilitationsHandlerTests.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.ModifyPriceHandlerTests">
            <summary>
            Prueba el handler para modificar la cantidad en una oferta.
            </summary>
        </member>
        <member name="M:Tests.ModifyPriceHandlerTests.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.ModifyPriceHandlerTests.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.ModifyPriceHandlerTests.HandleOfferListTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.ModifyPriceHandlerTests.HandleFinaleTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial
             y que se cambie la cantidad del material de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.ModifyPriceHandlerTests.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.ModifyQuantityHandlerTest">
            <summary>
            Prueba el handler para modificar la cantidad en una oferta.
            </summary>
        </member>
        <member name="M:Tests.ModifyQuantityHandlerTest.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.ModifyQuantityHandlerTest.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.ModifyQuantityHandlerTest.HandleOfferListTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.ModifyQuantityHandlerTest.HandleFinaleTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial
             y que se cambie la cantidad del material de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.ModifyQuantityHandlerTest.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.PublishOfferHandlerTest">
            <summary>
            Prueba el handler para publicar una oferta.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandleMaterialTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandleQuantityTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial
             y que se cambie la cantidad del material de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandlePriceTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial 
            y que se modifique el precio de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandleLocationTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial 
            y que se modifique la location de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.HandleHabilitationTest">
            <summary>
             /// Prueba que el InternalHandle se haga correctamente, que cambie el estado del handler al estado inicial 
            y que se modifique las habilitaciones de la oferta correctamente.
            </summary>
        </member>
        <member name="M:Tests.PublishOfferHandlerTest.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.RemoveCompanyHandlerTests">
            <summary>
            Se prueba el handler para remover una company.
            </summary>
        </member>
        <member name="M:Tests.RemoveCompanyHandlerTests.SetUp">
            <summary>
            Se setea la company a eliminar.
            </summary>
        </member>
        <member name="M:Tests.RemoveCompanyHandlerTests.HandleStartTest">
            <summary>
             Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.RemoveCompanyHandlerTests.HandleCompanyTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            Borrando a la company que se deseaba eliminar.
            </summary>
        </member>
        <member name="M:Tests.RemoveCompanyHandlerTests.DoesNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.RemoveUserHandlerTests">
            <summary>
            Se prueba el handler para remover una company.
            </summary>
        </member>
        <member name="M:Tests.RemoveUserHandlerTests.SetUp">
            <summary>
            Se setea la company a eliminar.
            </summary>
        </member>
        <member name="M:Tests.RemoveUserHandlerTests.HandleStartTest">
            <summary>
             Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.RemoveUserHandlerTests.HandleCompanyTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            Borrando a la company que se deseaba eliminar.
            </summary>
        </member>
        <member name="M:Tests.RemoveUserHandlerTests.DoesNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.ResumeOfferHandlerTest">
            <summary>
            Prueba el handler para reanudar una oferta.
            </summary>
        </member>
        <member name="M:Tests.ResumeOfferHandlerTest.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.ResumeOfferHandlerTest.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.ResumeOfferHandlerTest.HandleResumeOfferTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente, cambie el estado del handler y que la respuesta que se envia sea la predeterminada.
            </summary>
        </member>
        <member name="M:Tests.ResumeOfferHandlerTest.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.SuspendOfferHandlerTests">
            <summary>
            Prueba el handler para reanudar una oferta.
            </summary>
        </member>
        <member name="M:Tests.SuspendOfferHandlerTests.Setup">
            <summary>
            SetUp de la clase ModifyQuantityHandlerTest.
            </summary>
        </member>
        <member name="M:Tests.SuspendOfferHandlerTests.HandleStartTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler..
            </summary>
        </member>
        <member name="M:Tests.SuspendOfferHandlerTests.HandleSuspendOfferTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.SuspendOfferHandlerTests.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.UnregisteredCompanyUserHandlerTests">
            <summary>
            /// Prueba el handler para registrar un company user.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredCompanyUserHandlerTests.SetUP">
            <summary>
            Se setea el company user.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredCompanyUserHandlerTests.HandleStartTest">
            <summary>
            /// Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredCompanyUserHandlerTests.HandleTokenTest">
            <summary>
            Prueba que el InternalHandle se haga correctamente y cambie el estado del handler.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredCompanyUserHandlerTests.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredEntrepreneurUserHandlerTests.SetUp">
            <summary>
            Se setea el usuario Entrepreneur.
            </summary>
        </member>
        <member name="M:Tests.UnregisteredEntrepreneurUserHandlerTests.InternalNotHandleTest">
            <summary>
            Prueba que no se realice el handler.
            </summary>
        </member>
        <member name="T:Tests.LocationAdapterTests">
            <summary>
            Prueba la clase <see cref="T:ClassLibrary.LocationAdapter"/>
            </summary>
            [TestFixture]
        </member>
        <member name="M:Tests.LocationAdapterTests.Setup">
            <summary>
            Se crean variable de la api y para la ubicación.
            </summary>
        </member>
        <member name="M:Tests.LocationAdapterTests.SetLocationTest">
            <summary>
            Prueba si la ubicacion que devuelve el método GetLocation de LocationApiAdapter es igual a la ubicacion de la Api.
            </summary>
        </member>
        <member name="M:Tests.LocationAdapterTests.GetDistance">
            <summary>
            Prueba que el metodo GetDistance devuelva la distancia correcta y no nula.
            </summary>
        </member>
        <member name="M:Tests.LocationAdapterTests.GetDuration">
            <summary>
            Prueba que el metodo devuelva  que  la duracion entre direcciones sea correcta.
            </summary>
        </member>
        <member name="T:Tests.MarketTest">
            <summary>
            Prueba  la clase <see cref="T:ClassLibrary.Market"/>.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.SetUp">
            <summary>
            Se crea una instancia de offer.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.PublishOfferTest">
            <summary>
            Prueba que la Oferta se publique.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.RemoveOfferTest">
            <summary>
            Prueba que se remueva una oferta del registro de ofertas.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.SuspendOfferTest">
            <summary>
            Prueba que se suspenda o pause la oferta y se cambie de lista, de las actuales a las pausadas.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.ResumeOfferTest">
            <summary>
            Prueba que se despause una oferta y se cambie de lista, de las suspendidas a las actuales.
            </summary>
        </member>
        <member name="M:Tests.MarketTest.CreateOffer">
            <summary>
            Prueba que se cree una oferta correctamente, se publique en el mercado y se agregue a la lista de ofertas de la empresa.
            </summary>
        </member>
        <member name="T:Tests.MaterialTest">
            <summary>
            Prueba de la clase <see cref="T:ClassLibrary.Material"/>.
            </summary>
        </member>
        <member name="M:Tests.MaterialTest.Setup">
            <summary>
            Se crean variables con los parametro para crear un objeto material.
            </summary>
        </member>
        <member name="M:Tests.MaterialTest.CreateMaterialTest">
            <summary>
            Prueba para crear un material.
            </summary>
        </member>
        <member name="T:Tests.OfferTest">
            <summary>
            Prueba de la clase <see cref="T:ClassLibrary.Offer"/>.
            </summary>
        </member>
        <member name="M:Tests.OfferTest.Setup">
            <summary>
             Set up del test de Offer.
            </summary>
        </member>
        <member name="M:Tests.OfferTest.CreateOfferTest">
            <summary>
            Prueba para crear una oferta.
            </summary>
        </member>
        <member name="T:Tests.TokenRegisterTests">
            <summary>
            Prueba de la clase del registro de empresas.
            </summary>
        </member>
        <member name="M:Tests.TokenRegisterTests.AddTest">
            <summary>
            Prueba que se agregue un token  al registro.
            </summary>
        </member>
        <member name="M:Tests.TokenRegisterTests.RemoveTest">
            <summary>
            Prueba que se remueva un token  del registro de tokens.
            </summary>
        </member>
        <member name="M:Tests.TokenRegisterTests.IsValidTest">
            <summary>
            Prueba que un token sea valido y devuelva la empresa correcta.
            </summary>
        </member>
        <member name="M:Tests.TokenRegisterTests.ContainsTest">
            <summary>
            Prueba de que el token este en la lista de tokens.
            </summary>
        </member>
        <member name="T:Tests.UserRegisterTests">
            <summary>
            Prueba de la clase UserRegister.
            </summary>
        </member>
        <member name="M:Tests.UserRegisterTests.SetUp">
            <summary>
            Se crea una instancia de User para los tests.
            </summary>
        </member>
        <member name="M:Tests.UserRegisterTests.AddTest">
            <summary>
            Prueba que se añada un user a la lista de users.
            </summary>
        </member>
        <member name="M:Tests.UserRegisterTests.RemoveTest">
            <summary>
            Prueba que se remueva un user de la lista de users, si esta en esta.
            </summary>
        </member>
        <member name="M:Tests.UserRegisterTests.GetUserByIdTest">
            <summary>
            Prueba que GetUserById devuelva un user y que sea el correcto.
            </summary>
        </member>
        <member name="T:Tests.UserTest">
            <summary>
            Prueba de la clase <see cref="T:ClassLibrary.Material"/>.
            </summary>
        </member>
        <member name="M:Tests.UserTest.Setup">
            <summary>
            Set up del test de User.
            </summary>
        </member>
        <member name="M:Tests.UserTest.CreateUserTest">
            <summary>
            Prueba para crear un user.
            </summary>
        </member>
    </members>
</doc>
